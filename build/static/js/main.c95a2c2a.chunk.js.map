{"version":3,"sources":["RacecarHeader.js","QuizProblem.js","QuizBody.js","Score.js","Settings.js","Summary.js","Welcome.js","NameForm.js","Quiz.js","RacecarFooter.js","App.js","serviceWorker.js","index.js"],"names":["RacecarHeader","className","icon","faCarSide","QuizProblem","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","typeOfProblem","difficulty","num1","num2","problem","completedProblem","correctAnswer","parseInt","answer","answerSubmit","isCorrect","preventDefault","onSubmit","id","type","min","step","pattern","autoFocus","onChange","React","Component","QuizBody","answerList","randomIntFromInterval","max","Math","floor","random","console","log","JSON","stringify","Score","score","numberCorrect","totalNumQuestions","Settings","viewSettings","onClick","toggleViewSettings","faCog","setTypeAddition","setTypeSub","setTypeMultiplication","setTypeDivision","setDifficultyEasy","setDifficultyMed","setDifficultyHard","showSummarytoUser","hideSummaryfromUser","startOver","Summary","items","map","item","key","faCheckSquare","faTimesCircle","showSummary","Welcome","userName","NameForm","active","Quiz","isActive","isTimed","backgroundColors","startQuiz","prevState","answerObj","faFlagCheckered","RacecarFooter","faHeart","faCoffee","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c95a2c2a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faCarSide,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarHeader() {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        Racecar Math\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faCarSide} />\n        </span>\n      </h1>\n    </header>\n  );\n}\n\nexport default RacecarHeader;\n","import React from \"react\";\nimport \"./App.css\";\n\nclass QuizProblem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    // event.preventDefault();\n    // alert(\"QuizProblem handleSubmit: \" + this.state.value);\n\n    const typeOfProblem = this.props.typeOfProblem;\n    const difficulty = this.props.difficulty;\n    const num1 = this.props.num1;\n    const num2 = this.props.num2;\n    const problem = this.props.problem;\n    const completedProblem = this.props.completedProblem;\n    const correctAnswer = parseInt(this.props.answer);\n    const answerSubmit = parseInt(this.state.value);\n    var isCorrect = null;\n    if (answerSubmit === correctAnswer) {\n      isCorrect = true;\n    } else {\n      isCorrect = false;\n    }\n\n    const answer = {\n      typeOfProblem,\n      difficulty,\n      num1,\n      num2,\n      problem,\n      completedProblem,\n      correctAnswer,\n      answerSubmit,\n      isCorrect\n    };\n\n    //alert(\"QuizProblem handleSubmit: \" + this.state.value);\n    //this.props.answerSubmit(this.state.value);\n    this.props.answerSubmit(answer);\n    this.setState({ value: \"\" });\n    event.preventDefault();\n  }\n\n  render() {\n\n    return (\n      <div className=\"clb-quiz-problem-area\">\n        <div className=\"math-problem-numbers\">{this.props.problem}</div>\n        <form onSubmit={this.handleSubmit} id=\"math-answer-form\">\n          <label>\n            Your Answer:\n            <input\n              type=\"number\"\n              min=\"0\"\n              step=\"1\"\n              pattern=\"[0-9]\"\n              autoFocus={true}\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default QuizProblem;\n","import React from \"react\";\nimport QuizProblem from \"./QuizProblem\";\nimport \"./App.css\";\n\nfunction QuizBody(props) {\n  const typeOfProblem = props.typeOfProblem;\n  const difficulty = props.difficulty;\n  const answerSubmit = props.answerSubmit;\n  const answerList = props.answerList;\n\n  let problem = null;\n  let num1 = null;\n  let num2 = null;\n  let answer = null;\n  let completedProblem = null;\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n// addition\nif (typeOfProblem === \"addition\") {\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(10, 100);\n          num2 = randomIntFromInterval(10, 100);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 10);\n          num2 = randomIntFromInterval(0, 10);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(50, 999);\n          num2 = randomIntFromInterval(50, 999);\n     }\n     answer = num1 + num2;\n     problem = num1 + \" + \" + num2 + \" = ?\";\n     completedProblem = num1 + \" + \" + num2 + \" = \" + answer;\n}\n// subtraction\nelse if (typeOfProblem === \"subtraction\") {\n\n     // loop to ensure a positive answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(10, 100);\n               num2 = randomIntFromInterval(10, 100);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 10);\n               num2 = randomIntFromInterval(0, 10);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(50, 999);\n               num2 = randomIntFromInterval(50, 999);\n          }\n          answer = num1 - num2;\n          problem = num1 + \" - \" + num2 + \" = ?\";\n          completedProblem = num1 + \" - \" + num2 + \" = \" + answer;\n\n     } while ( answer <= 0 );\n\n}\n// multiplication\nelse if (typeOfProblem === \"multiplication\") {\n\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(5, 15);\n          num2 = randomIntFromInterval(5, 15);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 8);\n          num2 = randomIntFromInterval(0, 8);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(5, 30);\n          num2 = randomIntFromInterval(5, 30);\n     }\n     answer = num1 * num2;\n     problem = num1 + \" × \" + num2 + \" = ?\";\n     completedProblem = num1 + \" × \" + num2 + \" = \" + answer;\n\n}\n// division\nelse if (typeOfProblem === \"division\") {\n\n     // loop to ensure an integer answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(5, 150);\n               num2 = randomIntFromInterval(2, 15);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 24);\n               num2 = randomIntFromInterval(1, 8);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(10, 500);\n               num2 = randomIntFromInterval(5, 250);\n          }\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n     } while ( ((answer - Math.floor(answer)) !== 0) || (num1 === num2) );\n\n}\n\n  console.log(\"answerList: \" + JSON.stringify(answerList));\n\n  return (\n    <main className=\"clb-quiz-body-area\">\n      <QuizProblem\n        typeOfProblem={typeOfProblem}\n        difficulty={difficulty}\n        answerSubmit={answerSubmit}\n        num1={num1}\n        num2={num2}\n        answer={answer}\n        problem={problem}\n        completedProblem={completedProblem}\n      />\n    </main>\n  );\n}\n\nexport default QuizBody;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Score(props) {\n\n     const score = Math.floor((props.numberCorrect / props.totalNumQuestions) * 100);\n\n     if( props.totalNumQuestions > 0 ) {\n          return <h2 className=\"current-score\">Score: {score}%</h2>\n     } else {\n          return null;\n     }\n\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Settings(props) {\n\n     if( props.viewSettings === true ) {\n\n       return (\n         <div className=\"clb-settings revealed\">\n           <button onClick={props.toggleViewSettings}><FontAwesomeIcon icon={faCog} /> Hide Settings</button>\n           <div className=\"single-setting-area\">\n           <h3>Type of Question</h3>\n                <button onClick={props.setTypeAddition}>Addition</button>\n                <button onClick={props.setTypeSub}>Subtraction</button>\n                <button onClick={props.setTypeMultiplication}>Multiplication</button>\n                <button onClick={props.setTypeDivision}>Division</button>\n           </div>\n           <div className=\"single-setting-area\">\n           <h3>Question Difficulty</h3>\n                <button onClick={props.setDifficultyEasy}>Easy</button>\n                <button onClick={props.setDifficultyMed}>Medium</button>\n                <button onClick={props.setDifficultyHard}>Hard</button>\n           </div>\n           <div className=\"single-setting-area\">\n           <h3>Show Summary of Results?</h3>\n                <button onClick={props.showSummarytoUser}>Yes</button>\n                <button onClick={props.hideSummaryfromUser}>No</button>\n           </div>\n           <div className=\"single-setting-area start-over\">\n                <button onClick={props.startOver}>Start Over</button>\n           </div>\n         </div>\n       );\n\n } else {\n      return (\n      <div className=\"clb-settings hidden\">\n        <button onClick={props.toggleViewSettings}><FontAwesomeIcon icon={faCog} /> Show Settings</button>\n        </div>);\n     }\n\n}\n\nexport default Settings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction Summary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, key) =>\n          <div key={item.num1 + \"-\" + item.num2}>\n               {item.completedProblem} | Your Answer: {item.answerSubmit}\n\n               {item.isCorrect === true &&\n                  <span className=\"summary-correct\">\n                    <FontAwesomeIcon icon={faCheckSquare} />\n                  </span>\n                }\n                {item.isCorrect === false &&\n                   <span className=\"summary-wrong\">\n                     <FontAwesomeIcon icon={faTimesCircle} />\n                   </span>\n                 }\n          </div>);\n\n     if(props.showSummary) {\n\n            return (\n              <div className=\"summary-area\">\n                <h3>Your Previous Answers</h3>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n       } else {\n            return (<div className=\"summary-hidden\"></div>);\n       }\n}\n\nexport default Summary;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Welcome = (props) => {\n\n     if( !props.userName ) {\n\n       return (\n         <div className=\"clb-welcome-area blank\">\n           <p></p>\n         </div>\n       );\n\n      } else {\n\n           return (\n             <div className=\"clb-welcome-area\">\n               <p>Welcome, {props.userName}</p>\n             </div>\n           );\n\n     }\n\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport \"./App.css\";\nimport Welcome from \"./Welcome\";\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         value: '',\n         active: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n\n    event.preventDefault();\n    // return (<Welcome userName={this.state.value} />);\n    this.setState({active: false});\n\n  }\n\n  render() {\n       if( this.state.active ) {\n         return (\n              <>\n                <form onSubmit={this.handleSubmit} id=\"name-form\">\n                  <label>\n                  What's Your Name?\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                  </label>\n                  <input type=\"submit\" value=\"Submit\" />\n                </form>\n           <Welcome userName={this.state.value} />\n           </>\n         );\n    } else {\n         return (\n              <>\n                <Welcome userName={this.state.value} />\n                </>\n         );\n    }\n  }\n}\n\nexport default NameForm;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport Score from \"./Score.js\";\nimport Settings from \"./Settings.js\";\nimport Summary from \"./Summary.js\";\nimport NameForm from \"./NameForm\";\nimport \"./App.css\";\n\nimport {\n  faFlagCheckered\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         isActive: false,\n         viewSettings: false,\n         typeOfProblem: \"addition\",\n         isTimed: false,\n         difficulty: \"medium\",\n         backgroundColors: \"blue\",\n         showSummary: false,\n         numberCorrect: null,\n         totalNumQuestions: null,\n         answerList: []\n    };\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.startOver = this.startOver.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.showSummarytoUser = this.showSummarytoUser.bind(this);\n    this.hideSummaryfromUser = this.hideSummaryfromUser.bind(this);\n    this.setDifficultyEasy = this.setDifficultyEasy.bind(this);\n    this.setDifficultyMed = this.setDifficultyMed.bind(this);\n    this.setDifficultyHard = this.setDifficultyHard.bind(this);\n    this.setTypeAddition = this.setTypeAddition.bind(this);\n    this.setTypeSub = this.setTypeSub.bind(this);\n    this.setTypeMultiplication = this.setTypeMultiplication.bind(this);\n    this.setTypeDivision = this.setTypeDivision.bind(this);\n    this.toggleViewSettings = this.toggleViewSettings.bind(this);\n\n  }\n\n  startQuiz(event) {\n    event.preventDefault();\n    this.setState({ isActive: true });\n    console.log(\"startQuiz\");\n  }\n\n  toggleViewSettings(event) {\n    event.preventDefault();\n    this.setState(prevState => ({\n       viewSettings: !prevState.viewSettings\n     }));\n    console.log(\"toggleViewSettings\");\n  }\n\n  startOver(event) {\n    event.preventDefault();\n    this.setState({\n         isActive: false,\n         viewSettings: false,\n         typeOfProblem: \"addition\",\n         isTimed: false,\n         difficulty: \"medium\",\n         backgroundColors: \"blue\",\n         showSummary: false,\n         numberCorrect: null,\n         totalNumQuestions: null,\n         answerList: []\n    });\n    console.log(\"startOver\");\n  }\n\n  setTypeAddition(event) {\n       event.preventDefault();\n       this.setState({ typeOfProblem: 'addition' });\n       console.log(\"setTypeAddition\");\n }\n\n setTypeSub(event) {\n      event.preventDefault();\n      this.setState({ typeOfProblem: 'subtraction' });\n      console.log(\"setTypeSub\");\n}\n\nsetTypeMultiplication(event) {\n    event.preventDefault();\n    this.setState({ typeOfProblem: 'multiplication' });\n    console.log(\"setTypeMultiplication\");\n}\n\nsetTypeDivision(event) {\n    event.preventDefault();\n    this.setState({ typeOfProblem: 'division' });\n    console.log(\"setTypeDivision\");\n}\n\n  setDifficultyEasy(event) {\n       event.preventDefault();\n       this.setState({ difficulty: 'easy' });\n       console.log(\"setDifficultyEasy\");\n }\n\n setDifficultyMed(event) {\n      event.preventDefault();\n      this.setState({ difficulty: 'medium' });\n      console.log(\"setDifficultyMed\");\n}\n\nsetDifficultyHard(event) {\n     event.preventDefault();\n     this.setState({ difficulty: 'hard' });\n     console.log(\"setDifficultyHard\");\n}\n\n  showSummarytoUser(event) {\n    event.preventDefault();\n    this.setState({ showSummary: true });\n    console.log(\"showSummarytoUser\");\n  }\n\n  hideSummaryfromUser(event) {\n    event.preventDefault();\n    this.setState({ showSummary: false });\n    console.log(\"hideSummaryfromUser\");\n  }\n\n  answerSubmit(answerObj) {\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState((prevState) => {\n         return { totalNumQuestions: prevState.totalNumQuestions + 1 }\n    });\n\n    if(answerObj.isCorrect === true) {\n         this.setState((prevState) => {\n              return { numberCorrect: prevState.numberCorrect + 1 }\n         });\n    }\n\n  }\n\n\n\n\n\n\n  render() {\n    if (this.state.isActive === true) {\n      return (\n        <>\n          <NameForm />\n          <Settings\n               viewSettings={this.state.viewSettings}\n               toggleViewSettings={this.toggleViewSettings}\n               setTypeAddition={this.setTypeAddition}\n               setTypeSub={this.setTypeSub}\n               setTypeMultiplication={this.setTypeMultiplication}\n               setTypeDivision={this.setTypeDivision}\n               setDifficultyEasy={this.setDifficultyEasy}\n               setDifficultyMed={this.setDifficultyMed}\n               setDifficultyHard={this.setDifficultyHard}\n               showSummarytoUser={this.showSummarytoUser}\n               hideSummaryfromUser={this.hideSummaryfromUser}\n               startOver={this.startOver}\n          />\n\n          <h2 className=\"quiz-active-message\">Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n           {this.state.difficulty} &middot; {this.state.typeOfProblem}\n         </div>\n          <QuizBody\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n          <Score\n               numberCorrect={this.state.numberCorrect}\n               totalNumQuestions={this.state.totalNumQuestions}\n          />\n          <Summary\n               answerList={this.state.answerList}\n               showSummary={this.state.showSummary}\n          />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <button onClick={this.startQuiz} id=\"start-quiz\">Start Your Engines <FontAwesomeIcon icon={faFlagCheckered} /></button>\n        </>\n      );\n    }\n  }\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faHeart,\n  faCoffee,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarFooter() {\n  return (\n    <footer className=\"clb-footer\">\n    <p className=\"version\">Version 0.3 - Nov 7, 2019</p>\n      <p>\n        Made by Chris with\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faHeart} />\n          <FontAwesomeIcon icon={faCoffee} />\n        </span>\n      </p>\n    </footer>\n  );\n}\n\nexport default RacecarFooter;\n","import React from \"react\";\nimport RacecarHeader from \"./RacecarHeader\";\nimport Quiz from \"./Quiz\";\nimport RacecarFooter from \"./RacecarFooter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RacecarHeader />\n      <Quiz />\n      <RacecarFooter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// get our fontawesome imports\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}