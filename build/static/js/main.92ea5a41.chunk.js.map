{"version":3,"sources":["RacecarHeader.js","QuizProblem.js","QuizBody.js","Score.js","Settings.js","Summary.js","Welcome.js","NameForm.js","Quiz.js","RacecarFooter.js","App.js","serviceWorker.js","index.js"],"names":["RacecarHeader","className","icon","faCarSide","QuizProblem","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","typeOfProblem","difficulty","num1","num2","problem","completedProblem","correctAnswer","parseInt","answer","answerSubmit","isCorrect","preventDefault","console","log","refs","quizInput","focus","onSubmit","id","ref","type","min","step","pattern","autoFocus","onChange","required","React","Component","QuizBody","answerList","randomIntFromInterval","max","Math","floor","random","JSON","stringify","Score","score","numberCorrect","totalNumQuestions","Settings","easyButton","onClick","setDifficultyEasy","medButton","setDifficultyMed","hardButton","setDifficultyHard","showSummary","showSummaryYes","showSummarytoUser","showSummaryNo","hideSummaryfromUser","viewSettings","colorSchemeOptions","label","defaultValue","currentColorScheme","questionTypeOptions","defaultQuestionType","options","changeColors","setQuestionType","e","window","confirm","startOver","toggleViewSettings","faCog","Summary","items","map","item","key","faCheckSquare","faTimesCircle","Welcome","userName","NameForm","active","Quiz","isActive","isTimed","startQuiz","prevState","resetColors","backgroundColors","answerObj","faFlagCheckered","RacecarFooter","faHeart","faCoffee","App","colorScheme","appClasses","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92ea5a41.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faCarSide,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarHeader() {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        Racecar Math\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faCarSide} />\n        </span>\n      </h1>\n    </header>\n  );\n}\n\nexport default RacecarHeader;\n","import React from \"react\";\nimport \"./App.css\";\n\nclass QuizProblem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    // event.preventDefault();\n    // alert(\"QuizProblem handleSubmit: \" + this.state.value);\n\n    const typeOfProblem = this.props.typeOfProblem;\n    const difficulty = this.props.difficulty;\n    const num1 = this.props.num1;\n    const num2 = this.props.num2;\n    const problem = this.props.problem;\n    const completedProblem = this.props.completedProblem;\n    const correctAnswer = parseInt(this.props.answer);\n    const answerSubmit = parseInt(this.state.value);\n    var isCorrect = null;\n    if (answerSubmit === correctAnswer) {\n      isCorrect = true;\n    } else {\n      isCorrect = false;\n    }\n\n    const answer = {\n      typeOfProblem,\n      difficulty,\n      num1,\n      num2,\n      problem,\n      completedProblem,\n      correctAnswer,\n      answerSubmit,\n      isCorrect\n    };\n\n    //alert(\"QuizProblem handleSubmit: \" + this.state.value);\n    //this.props.answerSubmit(this.state.value);\n    this.props.answerSubmit(answer);\n    this.setState({ value: \"\" });\n    event.preventDefault();\n  }\n\n  componentDidUpdate(){\n       console.log('componentDidUpdate');\n       this.refs.quizInput.focus();\n     }\n\n  render() {\n\n    return (\n      <div className=\"clb-quiz-problem-area\">\n        <div className=\"math-problem-numbers\">{this.props.problem}</div>\n        <form onSubmit={this.handleSubmit} id=\"math-answer-form\">\n          <label>\n            Your Answer:\n            <input\n               ref=\"quizInput\"\n              type=\"number\"\n              min=\"0\"\n              step=\"1\"\n              pattern=\"[0-9]\"\n              autoFocus={true}\n              value={this.state.value}\n              onChange={this.handleChange}\n              required\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default QuizProblem;\n","import React from \"react\";\nimport QuizProblem from \"./QuizProblem\";\nimport \"./App.css\";\n\nfunction QuizBody(props) {\n  const typeOfProblem = props.typeOfProblem;\n  const difficulty = props.difficulty;\n  const answerSubmit = props.answerSubmit;\n  const answerList = props.answerList;\n\n  let problem = null;\n  let num1 = null;\n  let num2 = null;\n  let answer = null;\n  let completedProblem = null;\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n// addition\nif (typeOfProblem === \"addition\") {\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(10, 100);\n          num2 = randomIntFromInterval(10, 100);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 10);\n          num2 = randomIntFromInterval(0, 10);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(50, 999);\n          num2 = randomIntFromInterval(50, 999);\n     }\n     answer = num1 + num2;\n     problem = num1 + \" + \" + num2 + \" = ?\";\n     completedProblem = num1 + \" + \" + num2 + \" = \" + answer;\n}\n// subtraction\nelse if (typeOfProblem === \"subtraction\") {\n\n     // loop to ensure a positive answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(10, 100);\n               num2 = randomIntFromInterval(10, 100);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 10);\n               num2 = randomIntFromInterval(0, 10);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(50, 999);\n               num2 = randomIntFromInterval(50, 999);\n          }\n          answer = num1 - num2;\n          problem = num1 + \" - \" + num2 + \" = ?\";\n          completedProblem = num1 + \" - \" + num2 + \" = \" + answer;\n\n     } while ( answer <= 0 );\n\n}\n// multiplication\nelse if (typeOfProblem === \"multiplication\") {\n\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(5, 15);\n          num2 = randomIntFromInterval(5, 15);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 8);\n          num2 = randomIntFromInterval(0, 8);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(5, 30);\n          num2 = randomIntFromInterval(5, 30);\n     }\n     answer = num1 * num2;\n     problem = num1 + \" × \" + num2 + \" = ?\";\n     completedProblem = num1 + \" × \" + num2 + \" = \" + answer;\n\n}\n// division\nelse if (typeOfProblem === \"division\") {\n\n     // loop to ensure an integer answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(5, 150);\n               num2 = randomIntFromInterval(2, 15);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 24);\n               num2 = randomIntFromInterval(1, 8);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(10, 500);\n               num2 = randomIntFromInterval(5, 250);\n          }\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n     } while ( ((answer - Math.floor(answer)) !== 0) || (num1 === num2) );\n\n}\n\n  console.log(\"answerList: \" + JSON.stringify(answerList));\n\n  return (\n    <main className=\"clb-quiz-body-area\">\n      <QuizProblem\n        typeOfProblem={typeOfProblem}\n        difficulty={difficulty}\n        answerSubmit={answerSubmit}\n        num1={num1}\n        num2={num2}\n        answer={answer}\n        problem={problem}\n        completedProblem={completedProblem}\n      />\n    </main>\n  );\n}\n\nexport default QuizBody;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Score(props) {\n\n     const score = Math.floor((props.numberCorrect / props.totalNumQuestions) * 100);\n\n     if( props.totalNumQuestions > 0 ) {\n          return <h2 className=\"current-score\">Score: {score}%</h2>\n     } else {\n          return null;\n     }\n\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Select from 'react-select';\n\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Settings(props) {\n\n  // Difficulty Buttons ------------------- //\n  let difficulty = props.difficulty;\n  let easyButton = (\n    <button onClick={props.setDifficultyEasy} className=\"difficulty easy\">\n      Easy\n    </button>\n  );\n  let medButton = (\n    <button onClick={props.setDifficultyMed} className=\"difficulty med\">\n      Medium\n    </button>\n  );\n  let hardButton = (\n    <button onClick={props.setDifficultyHard} className=\"difficulty hard\">\n      Hard\n    </button>\n  );\n\n  if (difficulty === \"easy\") {\n    easyButton = (\n      <button\n        onClick={props.setDifficultyEasy}\n        className=\"difficulty easy active\"\n      >\n        Easy\n      </button>\n    );\n  }\n  if (difficulty === \"medium\") {\n    medButton = (\n      <button\n        onClick={props.setDifficultyMed}\n        className=\"difficulty med active\"\n      >\n        Medium\n      </button>\n    );\n  }\n  if (difficulty === \"hard\") {\n    hardButton = (\n      <button\n        onClick={props.setDifficultyHard}\n        className=\"difficulty hard active\"\n      >\n        Hard\n      </button>\n    );\n  }\n  // END Difficulty Buttons ------------------- //\n\n  // Summary Buttons ------------------- //\n  let showSummary = props.showSummary;\n  let showSummaryYes = (\n    <button onClick={props.showSummarytoUser} className=\"show-summary true\">\n      Yes\n    </button>\n  );\n  let showSummaryNo = (\n    <button onClick={props.hideSummaryfromUser} className=\"show-summary false\">\n      No\n    </button>\n  );\n\n  if (showSummary === true) {\n    showSummaryYes = (\n      <button\n        onClick={props.showSummarytoUser}\n        className=\"show-summary true active\"\n      >\n        Yes\n      </button>\n    );\n  }\n  if (showSummary === false) {\n    showSummaryNo = (\n      <button\n        onClick={props.hideSummaryfromUser}\n        className=\"show-summary false active\"\n      >\n        No\n      </button>\n    );\n  }\n\n  if (props.viewSettings === true) {\n\n       // Color Scheme -- SELECT\n       const colorSchemeOptions = [\n            { value: 'blue', label: 'Blue' },\n            { value: 'pink', label: 'Pink' },\n            { value: 'orange', label: 'Orange' },\n            { value: 'green', label: 'Green' }\n       ];\n       var defaultValue = colorSchemeOptions[0];\n       if( props.currentColorScheme === 'pink' ) { defaultValue = colorSchemeOptions[1]; }\n       if( props.currentColorScheme === 'orange' ) { defaultValue = colorSchemeOptions[2]; }\n       if( props.currentColorScheme === 'green' ) { defaultValue = colorSchemeOptions[3]; }\n\n\n       // Type of Question -- SELECT\n       const questionTypeOptions = [\n            { value: 'addition', label: '+ Addition' },\n            { value: 'subtraction', label: '– Subtraction' },\n            { value: 'multiplication', label: '× Multiplication' },\n            { value: 'division', label: '÷ Divison' }\n       ];\n\n       var defaultQuestionType = questionTypeOptions[0];\n       if( props.typeOfProblem === 'subtraction' ) { defaultQuestionType = questionTypeOptions[1]; }\n       if( props.typeOfProblem === 'multiplication' ) { defaultQuestionType = questionTypeOptions[2]; }\n       if( props.typeOfProblem === 'division' ) { defaultQuestionType = questionTypeOptions[3]; }\n\n    return (\n      <div className=\"clb-settings revealed\">\n        <div className=\"single-setting-area\">\n          <h3>Choose Colors</h3>\n          <Select options={colorSchemeOptions} defaultValue={defaultValue} onChange={props.changeColors} id=\"choose-colors-select\"/>\n        </div>\n        <div className=\"single-setting-area\">\n          <h3>Type of Question</h3>\n          <Select options={questionTypeOptions} defaultValue={defaultQuestionType} onChange={props.setQuestionType} id=\"question-type-select\"/>\n        </div>\n        <div className=\"single-setting-area\">\n          <h3>Question Difficulty</h3>\n          {easyButton}\n          {medButton}\n          {hardButton}\n        </div>\n        <div className=\"single-setting-area\">\n          <h3>Show Summary of Results?</h3>\n          {showSummaryYes}\n          {showSummaryNo}\n        </div>\n        <div className=\"single-setting-area start-over\">\n          <button\n            onClick={e =>\n              window.confirm(\n                \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n              ) && props.startOver(e)\n            }\n          >\n            Start Over\n          </button>\n        </div>\n        <button onClick={props.toggleViewSettings} id=\"hide-settings\">\n          <FontAwesomeIcon icon={faCog} /> Hide Settings\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"clb-settings hidden\">\n        <button onClick={props.toggleViewSettings}>\n          <FontAwesomeIcon icon={faCog} /> Show Settings\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction Summary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, key) =>\n          <div key={item.num1 + \"-\" + item.num2} className=\"single-answer-result\">\n               <div className=\"correct-answer\">{item.completedProblem}\n                    {item.isCorrect === true &&\n                       <span className=\"summary-correct\">\n                         <FontAwesomeIcon icon={faCheckSquare} />\n                       </span>\n                     }\n                     {item.isCorrect === false &&\n                        <span className=\"summary-wrong\">\n                          <FontAwesomeIcon icon={faTimesCircle} />\n                        </span>\n                      }\n                 </div>\n               <div className=\"single-answer-user\">Your Answer: {item.answerSubmit}</div>\n\n\n\n\n\n          </div>);\n\n     if(props.showSummary) {\n\n            return (\n              <div className=\"summary-area\">\n                <h3>Your Previous Answers</h3>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n       } else {\n            return (<div className=\"summary-hidden\"></div>);\n       }\n}\n\nexport default Summary;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Welcome = (props) => {\n\n     if( !props.userName ) {\n\n       return (\n         <div className=\"clb-welcome-area blank\">\n           <p></p>\n         </div>\n       );\n\n      } else {\n\n           return (\n             <div className=\"clb-welcome-area\">\n               <p>Welcome, {props.userName}</p>\n             </div>\n           );\n\n     }\n\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport \"./App.css\";\nimport Welcome from \"./Welcome\";\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         value: '',\n         active: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n\n    event.preventDefault();\n    // return (<Welcome userName={this.state.value} />);\n    this.setState({active: false});\n\n  }\n\n  render() {\n       if( this.state.active ) {\n         return (\n              <>\n                <form onSubmit={this.handleSubmit} id=\"name-form\">\n                  <label>\n                  What's Your Name?\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                  </label>\n                  <input type=\"submit\" value=\"Submit\" />\n                </form>\n           <Welcome userName={this.state.value} />\n           </>\n         );\n    } else {\n         return (\n              <>\n                <Welcome userName={this.state.value} />\n                </>\n         );\n    }\n  }\n}\n\nexport default NameForm;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport Score from \"./Score.js\";\nimport Settings from \"./Settings.js\";\nimport Summary from \"./Summary.js\";\nimport NameForm from \"./NameForm.js\";\n//import App from \"./App.js\";\nimport \"./App.css\";\n\nimport { faFlagCheckered } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: false,\n      viewSettings: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"medium\",\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      answerList: []\n    };\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.startOver = this.startOver.bind(this);\n    this.setQuestionType = this.setQuestionType.bind(this);\n    this.setDifficultyEasy = this.setDifficultyEasy.bind(this);\n    this.setDifficultyMed = this.setDifficultyMed.bind(this);\n    this.setDifficultyHard = this.setDifficultyHard.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.showSummarytoUser = this.showSummarytoUser.bind(this);\n    this.hideSummaryfromUser = this.hideSummaryfromUser.bind(this);\n    this.toggleViewSettings = this.toggleViewSettings.bind(this);\n\n  }\n\n  startQuiz(event) {\n    event.preventDefault();\n    this.setState({ isActive: true });\n    console.log(\"startQuiz\");\n  }\n\n  toggleViewSettings(event) {\n    event.preventDefault();\n    this.setState(prevState => ({\n      viewSettings: !prevState.viewSettings\n    }));\n    console.log(\"toggleViewSettings\");\n  }\n\n  startOver(event) {\n    event.preventDefault();\n    this.props.resetColors(event);\n\n    this.setState({\n      isActive: false,\n      viewSettings: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"medium\",\n      backgroundColors: \"blue\",\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      answerList: []\n    });\n\n    console.log(\"startOver\");\n  }\n\n  setQuestionType(event) {\n    this.setState({ typeOfProblem: event.value });\n    console.log(event);\n    console.log(\"setQuestionType\");\n  }\n\n  setDifficultyEasy(event) {\n    event.preventDefault();\n    this.setState({ difficulty: \"easy\" });\n    console.log(\"setDifficultyEasy\");\n  }\n\n  setDifficultyMed(event) {\n    event.preventDefault();\n    this.setState({ difficulty: \"medium\" });\n    console.log(\"setDifficultyMed\");\n  }\n\n  setDifficultyHard(event) {\n    event.preventDefault();\n    this.setState({ difficulty: \"hard\" });\n    console.log(\"setDifficultyHard\");\n  }\n\n  showSummarytoUser(event) {\n    event.preventDefault();\n    this.setState({ showSummary: true });\n    console.log(\"showSummarytoUser\");\n  }\n\n  hideSummaryfromUser(event) {\n    event.preventDefault();\n    this.setState({ showSummary: false });\n    console.log(\"hideSummaryfromUser\");\n  }\n\n  answerSubmit(answerObj) {\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState(prevState => {\n      return { totalNumQuestions: prevState.totalNumQuestions + 1 };\n    });\n\n    if (answerObj.isCorrect === true) {\n      this.setState(prevState => {\n        return { numberCorrect: prevState.numberCorrect + 1 };\n      });\n    }\n  }\n\n  render() {\n\n       console.log(this.props.currentColorScheme);\n       const currentColorScheme = this.props.currentColorScheme;\n\n    if (this.state.isActive === true) {\n      return (\n        <>\n          <NameForm />\n          <Settings\n            viewSettings={this.state.viewSettings}\n            toggleViewSettings={this.toggleViewSettings}\n            setQuestionType={this.setQuestionType}\n            setDifficultyEasy={this.setDifficultyEasy}\n            setDifficultyMed={this.setDifficultyMed}\n            setDifficultyHard={this.setDifficultyHard}\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            showSummary={this.state.showSummary}\n            showSummarytoUser={this.showSummarytoUser}\n            hideSummaryfromUser={this.hideSummaryfromUser}\n            startOver={this.startOver}\n            resetColors={this.props.resetColors}\n            currentColorScheme={currentColorScheme}\n            changeColors={this.props.changeColors}\n          />\n\n          <h2 className=\"quiz-active-message\">Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n            {this.state.difficulty} &middot; {this.state.typeOfProblem}\n          </div>\n          <QuizBody\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n          <Score\n            numberCorrect={this.state.numberCorrect}\n            totalNumQuestions={this.state.totalNumQuestions}\n          />\n          <Summary\n            answerList={this.state.answerList}\n            showSummary={this.state.showSummary}\n          />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <button onClick={this.startQuiz} id=\"start-quiz\">\n            Start Your Engines <FontAwesomeIcon icon={faFlagCheckered} />\n          </button>\n        </>\n      );\n    }\n  }\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faHeart,\n  faCoffee,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarFooter() {\n  return (\n    <footer className=\"clb-footer\">\n\n    <p className=\"version\">Version 0.5 - Nov 19, 2019</p>\n      <p>\n        Made by Chris with\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faHeart} />\n          <FontAwesomeIcon icon={faCoffee} />\n        </span>\n      </p>\n    </footer>\n  );\n}\n\nexport default RacecarFooter;\n","import React from \"react\";\nimport RacecarHeader from \"./RacecarHeader\";\nimport Quiz from \"./Quiz\";\nimport RacecarFooter from \"./RacecarFooter\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorScheme: { value: 'blue', label: 'Blue' }\n    };\n\n    this.changeColors = this.changeColors.bind(this);\n    this.resetColors = this.resetColors.bind(this);\n  }\n\n  changeColors(event) {\n      console.log(event);\n      this.setState({ colorScheme: event });\n  }\n\n  resetColors(event) {\n       this.setState({ colorScheme: { value: 'blue', label: 'Blue' } });\n       console.log('RESET COLORS');\n }\n\n  render() {\n    let appClasses = \"App racecar-math \" + this.state.colorScheme.value;\n\n    return (\n      <div className={appClasses}>\n        <RacecarHeader />\n        <Quiz changeColors={this.changeColors} currentColorScheme={this.state.colorScheme.value} resetColors={this.resetColors} />\n        <RacecarFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// get our fontawesome imports\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}