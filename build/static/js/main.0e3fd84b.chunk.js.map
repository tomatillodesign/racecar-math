{"version":3,"sources":["RacecarHeader.js","QuizProblem.js","QuizBody.js","QuizAlert.js","Score.js","Settings.js","Summary.js","SprintSettings.js","SprintSummary.js","SprintEnding.js","Timer.js","SprintArea.js","Quiz.js","NameForm.js","RacecarFooter.js","App.js","serviceWorker.js","index.js"],"names":["RacecarHeader","className","href","icon","faCarSide","QuizProblem","props","state","value","handleChange","bind","handleSubmit","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","event","this","setState","target","typeOfProblem","streak","difficulty","num1","num2","problem","completedProblem","correctAnswer","parseInt","answer","answerSubmit","isCorrect","elapsed","Date","now","startTime","formattedElapsed","end","console","log","preventDefault","refs","quizInput","focus","start","onSubmit","id","ref","type","min","step","pattern","autoFocus","onChange","required","React","Component","QuizBody","isSprint","answerList","prevAnswer","length","randomIntFromInterval","max","random","JSON","stringify","QuizAlert","message","totalNumQuestions","numberCorrect","Score","score","correctToPublish","Settings","showSummary","showSummaryYes","onClick","showSummarytoUser","showSummaryNo","hideSummaryfromUser","colorSchemeOptions","label","defaultValue","currentColorScheme","questionTypeOptions","defaultQuestionType","difficultyOptions","defaultDifficulty","options","changeColors","setQuestionType","setQuestionDifficulty","e","window","confirm","startOver","toggleViewSettings","faCog","Summary","items","map","item","index","key","faCheckSquare","faTimesCircle","SprintSettings","sprintLength","defaultSprintLength","setSprintLength","SprintSummary","SprintEnding","retrySprint","newSprint","Timer","timeRemaining","lengthOfSprint","tick","prevState","endSprint","clearInterval","interval","setInterval","SprintArea","getStarted","timeStarted","postSprintSummary","answerObj","viewSettings","offCanvasClick","resetColors","faFlagCheckered","Quiz","isActive","isMenuOpened","isTimed","startQuiz","startSprint","resetName","backgroundColors","width","transitionDuration","effect","position","faTools","NameForm","handleNameSubmit","handleNameChange","nameFormActive","name","RacecarFooter","faHeart","faCoffee","App","colorScheme","appClasses","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e3fd84b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faCarSide,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarHeader() {\n  return (\n    <header className=\"App-header\">\n      <a href=\"/\"><h1>\n        Racecar Math\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faCarSide} />\n        </span>\n      </h1></a>\n    </header>\n  );\n}\n\nexport default RacecarHeader;\n","import React from \"react\";\nimport \"./App.css\";\n\nclass QuizProblem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.millisToMinutesAndSeconds = this.millisToMinutesAndSeconds.bind(this);\n\n  }\n\n\n  millisToMinutesAndSeconds(millis) {\n       var minutes = Math.floor(millis / 60000);\n       var seconds = ((millis % 60000) / 1000).toFixed(1);\n       return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    // event.preventDefault();\n    // alert(\"QuizProblem handleSubmit: \" + this.state.value);\n\n    const typeOfProblem = this.props.typeOfProblem;\n    const streak = this.props.streak;\n    const difficulty = this.props.difficulty;\n    const num1 = this.props.num1;\n    const num2 = this.props.num2;\n    const problem = this.props.problem;\n    const completedProblem = this.props.completedProblem;\n    const correctAnswer = parseInt(this.props.answer);\n    const answerSubmit = parseInt(this.state.value);\n    var isCorrect = null;\n    if (answerSubmit === correctAnswer) {\n      isCorrect = true;\n    } else {\n      isCorrect = false;\n    }\n\n\n    const endTime = Date.now();\n    const startTime = this.props.startTime;\n    const elapsed = endTime - startTime;\n    const formattedElapsed = this.millisToMinutesAndSeconds(elapsed);\n    // console.log('ELAPSED: ' + formattedElapsed);\n\n    const answer = {\n      typeOfProblem,\n      difficulty,\n      num1,\n      num2,\n      problem,\n      completedProblem,\n      correctAnswer,\n      answerSubmit,\n      elapsed,\n      formattedElapsed,\n      isCorrect,\n      streak\n    };\n\n    //alert(\"QuizProblem handleSubmit: \" + this.state.value);\n    //this.props.answerSubmit(this.state.value);\n    this.props.answerSubmit(answer);\n    this.setState({ value: \"\" });\n\n    let end = Date.now();\n    console.log('End Time: ' + end);\n\n    event.preventDefault();\n  }\n\n  componentDidUpdate(){\n       console.log('componentDidUpdate');\n       this.refs.quizInput.focus();\n     }\n\ncomponentDidMount() {\n     let start = Date.now();\n     console.log('Mounted / Start Time: ' + start);\n}\n\n  render() {\n\n    return (\n      <div className=\"clb-quiz-problem-area\">\n        <div className=\"math-problem-numbers\">{this.props.problem}</div>\n        <form onSubmit={this.handleSubmit} id=\"math-answer-form\">\n          <label>\n            Your Answer:\n            <input\n               ref=\"quizInput\"\n              type=\"number\"\n              min=\"0\"\n              step=\"1\"\n              pattern=\"[0-9]\"\n              autoFocus={true}\n              value={this.state.value}\n              onChange={this.handleChange}\n              required\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default QuizProblem;\n","import React from \"react\";\nimport QuizProblem from \"./QuizProblem\";\nimport \"./App.css\";\n\nfunction QuizBody(props) {\n     const isSprint = props.isSprint;\n  const typeOfProblem = props.typeOfProblem;\n  const difficulty = props.difficulty;\n  const answerSubmit = props.answerSubmit;\n  const answerList = props.answerList;\n  const startTime = props.startTime;\n  const streak = props.streak;\n\n     const prevAnswer = answerList[answerList.length - 1];\n     console.log(prevAnswer);\n\n  console.log(\"startime: \" + startTime);\n\n\n  let problem = null;\n  let num1 = null;\n  let num2 = null;\n  let answer = null;\n  let completedProblem = null;\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n// addition\nif (typeOfProblem === \"addition\") {\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(10, 100);\n          num2 = randomIntFromInterval(10, 100);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 10);\n          num2 = randomIntFromInterval(0, 10);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(50, 999);\n          num2 = randomIntFromInterval(50, 999);\n     }\n     answer = num1 + num2;\n     problem = num1 + \" + \" + num2 + \" = ?\";\n     completedProblem = num1 + \" + \" + num2 + \" = \" + answer;\n}\n// subtraction\nelse if (typeOfProblem === \"subtraction\") {\n\n     // loop to ensure a positive answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(10, 100);\n               num2 = randomIntFromInterval(10, 100);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 10);\n               num2 = randomIntFromInterval(0, 10);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(50, 999);\n               num2 = randomIntFromInterval(50, 999);\n          }\n          answer = num1 - num2;\n          problem = num1 + \" - \" + num2 + \" = ?\";\n          completedProblem = num1 + \" - \" + num2 + \" = \" + answer;\n\n     } while ( answer <= 0 );\n\n}\n// multiplication\nelse if (typeOfProblem === \"multiplication\") {\n\n     if(difficulty === \"medium\") {\n          num1 = randomIntFromInterval(5, 15);\n          num2 = randomIntFromInterval(5, 15);\n     } else if (difficulty === \"easy\") {\n          num1 = randomIntFromInterval(0, 8);\n          num2 = randomIntFromInterval(0, 8);\n     } else if (difficulty === \"hard\") {\n          num1 = randomIntFromInterval(5, 30);\n          num2 = randomIntFromInterval(5, 30);\n     }\n     answer = num1 * num2;\n     problem = num1 + \" × \" + num2 + \" = ?\";\n     completedProblem = num1 + \" × \" + num2 + \" = \" + answer;\n\n}\n// division\nelse if ( typeOfProblem === \"division\" && difficulty === 'easy' ) {\n\n     // loop to ensure an integer answer\n     do {\n\n          num1 = randomIntFromInterval(0, 24);\n          num2 = randomIntFromInterval(1, 8);\n\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n     } while ( ((answer - Math.floor(answer)) !== 0) );\n\n} else if (typeOfProblem === \"division\") {\n\n     // loop to ensure an integer answer\n     do {\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(5, 150);\n               num2 = randomIntFromInterval(2, 15);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(10, 500);\n               num2 = randomIntFromInterval(5, 250);\n          }\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n     } while ( ((answer - Math.floor(answer)) !== 0) || (num1 === num2) );\n\n}\n\n  console.log(\"answerList: \" + JSON.stringify(answerList));\n\n  return (\n    <main className=\"clb-quiz-body-area\">\n      <QuizProblem\n        typeOfProblem={typeOfProblem}\n        difficulty={difficulty}\n        startTime={startTime}\n        answerSubmit={answerSubmit}\n        num1={num1}\n        num2={num2}\n        answer={answer}\n        problem={problem}\n        completedProblem={completedProblem}\n        streak={streak}\n      />\n    </main>\n  );\n}\n\nexport default QuizBody;\n","import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faCarSide,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction QuizAlert(props) {\n\n     let message = null;\n\n     // Correct Streaks\n     if( props.streak === 3 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success three\">3 in a row! 😄</div></div>\n     } else if ( props.streak === 4 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success four\">4 in a row! 🤩</div></div>\n     } else if ( props.streak === 5 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success five\">5 in a row! You're on fire! 🔥🔥🔥🔥🔥</div></div>\n     } else if ( props.streak === 10 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success ten\">That's 10 in a row! 🥳🎉👏<div className=\"what-next\">Are you ready for a bigger challenge?<br/>Use the settings to choose another type of problem or difficulty.</div></div></div>\n     } else if ( props.streak === 20 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success twenty\">Too easy! That's 20 in a row! 🥳🥳🎉🎉👏👏<div className=\"what-next\">Are you ready for a bigger challenge?<br/>Use the settings to choose another type of problem or difficulty.</div></div></div>\n     }\n\n     // Too Hard\n     if( props.totalNumQuestions > 9 && props.numberCorrect < 3 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"failure\">Looks like you're having a hard time. Would you like to try a different problem? Use the settings to change it up.</div></div>\n     }\n\n  return (\n\n       <>\n      {message}\n      </>\n\n  );\n\n}\n\nexport default QuizAlert;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Score(props) {\n\n     const score = Math.floor((props.numberCorrect / props.totalNumQuestions) * 100);\n\n     let correctToPublish = 0;\n     if( props.numberCorrect > 0 ) {\n          correctToPublish = props.numberCorrect;\n     }\n\n     if( props.totalNumQuestions > 0 ) {\n          return (\n               <div className=\"score-area\">\n                    <h2 className=\"current-score\">Score: {score}%</h2>\n                    <div className=\"score-detail answered\">Answered: {props.totalNumQuestions}</div>\n                    <div className=\"score-detail correct\">Correct: {correctToPublish}</div>\n               </div>\n          );\n     } else {\n          return null;\n     }\n\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Select from 'react-select';\n\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Settings(props) {\n\n\n  // Summary Buttons ------------------- //\n  let showSummary = props.showSummary;\n  let showSummaryYes = (\n    <button onClick={props.showSummarytoUser} className=\"show-summary true\">\n      Yes\n    </button>\n  );\n  let showSummaryNo = (\n    <button onClick={props.hideSummaryfromUser} className=\"show-summary false\">\n      No\n    </button>\n  );\n\n  if (showSummary === true) {\n    showSummaryYes = (\n      <button\n        onClick={props.showSummarytoUser}\n        className=\"show-summary true active\"\n      >\n        Yes\n      </button>\n    );\n  }\n  if (showSummary === false) {\n    showSummaryNo = (\n      <button\n        onClick={props.hideSummaryfromUser}\n        className=\"show-summary false active\"\n      >\n        No\n      </button>\n    );\n  }\n\n\n\n       // Color Scheme -- SELECT\n       const colorSchemeOptions = [\n            { value: 'blue', label: 'Blue' },\n            { value: 'pink', label: 'Pink' },\n            { value: 'orange', label: 'Orange' },\n            { value: 'green', label: 'Green' }\n       ];\n       var defaultValue = colorSchemeOptions[0];\n       if( props.currentColorScheme === 'pink' ) { defaultValue = colorSchemeOptions[1]; }\n       if( props.currentColorScheme === 'orange' ) { defaultValue = colorSchemeOptions[2]; }\n       if( props.currentColorScheme === 'green' ) { defaultValue = colorSchemeOptions[3]; }\n\n\n       // Type of Question -- SELECT\n       const questionTypeOptions = [\n            { value: 'addition', label: '+ Addition' },\n            { value: 'subtraction', label: '– Subtraction' },\n            { value: 'multiplication', label: '× Multiplication' },\n            { value: 'division', label: '÷ Divison' }\n       ];\n\n       var defaultQuestionType = questionTypeOptions[0];\n       if( props.typeOfProblem === 'subtraction' ) { defaultQuestionType = questionTypeOptions[1]; }\n       if( props.typeOfProblem === 'multiplication' ) { defaultQuestionType = questionTypeOptions[2]; }\n       if( props.typeOfProblem === 'division' ) { defaultQuestionType = questionTypeOptions[3]; }\n\n\n       // Difficulty -- SELECT\n       const difficultyOptions = [\n            { value: 'easy', label: 'Easy' },\n            { value: 'medium', label: 'Medium' },\n            { value: 'hard', label: 'Hard' }\n       ];\n\n       var defaultDifficulty = difficultyOptions[0];\n       if( props.difficulty === 'medium' ) { defaultDifficulty = difficultyOptions[1]; }\n       if( props.difficulty === 'hard' ) { defaultDifficulty = difficultyOptions[2]; }\n\n    return (\n      <div className=\"clb-settings revealed\">\n        <div className=\"single-setting-area colors\">\n          <h3>Racecar Colors</h3>\n          <Select options={colorSchemeOptions} defaultValue={defaultValue} onChange={props.changeColors} id=\"choose-colors-select\" />\n        </div>\n        <div className=\"single-setting-area question-types\">\n          <h3>Type of Math</h3>\n          <Select options={questionTypeOptions} defaultValue={defaultQuestionType} onChange={props.setQuestionType} id=\"question-type-select\" />\n        </div>\n        <div className=\"single-setting-area difficulty\">\n          <h3>Difficulty</h3>\n          <Select options={difficultyOptions} defaultValue={defaultDifficulty} onChange={props.setQuestionDifficulty} id=\"difficulty-select\" />\n        </div>\n        <div className=\"single-setting-area\">\n          <h3>Show Summary?</h3>\n          {showSummaryYes}\n          {showSummaryNo}\n        </div>\n        <div className=\"single-setting-area start-over\">\n          <button\n            onClick={e =>\n              window.confirm(\n                \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n              ) && props.startOver(e)\n            }\n          >\n            Start Over\n          </button>\n        </div>\n        <button onClick={props.toggleViewSettings} id=\"hide-settings\">\n          <FontAwesomeIcon icon={faCog} /> Hide Settings\n        </button>\n      </div>\n    );\n  \n}\n\nexport default Settings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare,\n          faTimesCircle\n } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction Summary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, index) =>\n               <div className=\"single-answer\" key={index} ><div className=\"question-number\">Question {index+1}</div>\n                    {item.isCorrect === true &&\n                    <div className=\"single-answer-result correct\">\n                              <div className=\"correct-answer\">{item.completedProblem}\n                                 <span className=\"summary-correct\">\n                                   <FontAwesomeIcon icon={faCheckSquare} />\n                                 </span>\n                            </div>\n                            </div>\n                     }\n                     {item.isCorrect === false &&\n                          <div className=\"single-answer-result incorrect\">\n                               <div className=\"correct-answer\">{item.completedProblem}\n                             <span className=\"summary-wrong\">\n                               <FontAwesomeIcon icon={faTimesCircle} />\n                             </span>\n                        </div>\n                        <div className=\"single-answer-user\">Your Answer: {item.answerSubmit}</div>\n                        </div>\n                      }\n               <div className=\"single-answer-user time-elapsed\">Time {item.formattedElapsed}</div>\n               </div>);\n\n     if(props.showSummary) {\n\n            return (\n              <div className=\"summary-area\">\n                <h2>Your Answers</h2>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n       } else {\n            return (<div className=\"summary-hidden\"></div>);\n       }\n}\n\nexport default Summary;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Select from 'react-select';\n\nfunction SprintSettings(props) {\n\n       // Color Scheme -- SELECT\n       const colorSchemeOptions = [\n            { value: 'blue', label: 'Blue' },\n            { value: 'pink', label: 'Pink' },\n            { value: 'orange', label: 'Orange' },\n            { value: 'green', label: 'Green' }\n       ];\n       var defaultValue = colorSchemeOptions[0];\n       if( props.currentColorScheme === 'pink' ) { defaultValue = colorSchemeOptions[1]; }\n       if( props.currentColorScheme === 'orange' ) { defaultValue = colorSchemeOptions[2]; }\n       if( props.currentColorScheme === 'green' ) { defaultValue = colorSchemeOptions[3]; }\n\n\n       // Type of Question -- SELECT\n       const questionTypeOptions = [\n            { value: 'addition', label: '+ Addition' },\n            { value: 'subtraction', label: '– Subtraction' },\n            { value: 'multiplication', label: '× Multiplication' },\n            { value: 'division', label: '÷ Divison' }\n       ];\n\n       var defaultQuestionType = questionTypeOptions[0];\n       if( props.typeOfProblem === 'subtraction' ) { defaultQuestionType = questionTypeOptions[1]; }\n       if( props.typeOfProblem === 'multiplication' ) { defaultQuestionType = questionTypeOptions[2]; }\n       if( props.typeOfProblem === 'division' ) { defaultQuestionType = questionTypeOptions[3]; }\n\n\n       // Difficulty -- SELECT\n       const difficultyOptions = [\n            { value: 'easy', label: 'Easy' },\n            { value: 'medium', label: 'Medium' },\n            { value: 'hard', label: 'Hard' }\n       ];\n\n       var defaultDifficulty = difficultyOptions[0];\n       if( props.difficulty === 'medium' ) { defaultDifficulty = difficultyOptions[1]; }\n       if( props.difficulty === 'hard' ) { defaultDifficulty = difficultyOptions[2]; }\n\n\n       // Length of Sprint -- SELECT\n       const sprintLength = [\n            { value: 60, label: '1 Minute' },\n            { value: 90, label: '90 Seconds' },\n            { value: 120, label: '2 Minutes' }\n       ];\n\n       var defaultSprintLength = sprintLength[0];\n       if( props.difficulty === 90 ) { defaultSprintLength = sprintLength[1]; }\n       if( props.difficulty === 120 ) { defaultSprintLength = sprintLength[2]; }\n\n    return (\n      <div className=\"clb-sprint-settings\">\n        <div className=\"single-setting-area colors\">\n          <h3>Racecar Colors</h3>\n          <Select options={colorSchemeOptions} defaultValue={defaultValue} onChange={props.changeColors} id=\"choose-colors-select\" />\n        </div>\n        <div className=\"single-setting-area question-types\">\n          <h3>Type of Math</h3>\n          <Select options={questionTypeOptions} defaultValue={defaultQuestionType} onChange={props.setQuestionType} id=\"question-type-select\" />\n        </div>\n        <div className=\"single-setting-area difficulty\">\n          <h3>Difficulty</h3>\n          <Select options={difficultyOptions} defaultValue={defaultDifficulty} onChange={props.setQuestionDifficulty} id=\"difficulty-select\" />\n        </div>\n        <div className=\"single-setting-area sprint-length\">\n          <h3>Amount of Time</h3>\n          <Select options={sprintLength} defaultValue={defaultSprintLength} onChange={props.setSprintLength} id=\"sprint-length\" />\n        </div>\n        <div className=\"single-setting-area start-over\">\n          <button\n            onClick={e =>\n              window.confirm(\n                \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n              ) && props.startOver(e)\n            }\n          >\n            Start Over\n          </button>\n        </div>\n      </div>\n    );\n\n}\n\nexport default SprintSettings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare,\n          faTimesCircle\n } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction SprintSummary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, index) =>\n               <div className=\"single-answer\" key={index} ><div className=\"question-number\">Question {index+1}</div>\n                    {item.isCorrect === true &&\n                    <div className=\"single-answer-result correct\">\n                              <div className=\"correct-answer\">{item.completedProblem}\n                                 <span className=\"summary-correct\">\n                                   <FontAwesomeIcon icon={faCheckSquare} />\n                                 </span>\n                            </div>\n                            </div>\n                     }\n                     {item.isCorrect === false &&\n                          <div className=\"single-answer-result incorrect\">\n                               <div className=\"correct-answer\">{item.completedProblem}\n                             <span className=\"summary-wrong\">\n                               <FontAwesomeIcon icon={faTimesCircle} />\n                             </span>\n                        </div>\n                        <div className=\"single-answer-user\">Your Answer: {item.answerSubmit}</div>\n                        </div>\n                      }\n               <div className=\"single-answer-user time-elapsed\">Time {item.formattedElapsed}</div>\n               </div>);\n\n\n            return (\n              <div className=\"summary-area\">\n                <h2>Your Answers</h2>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n}\n\nexport default SprintSummary;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction SprintEnding(props) {\n\n     //const test = props.test;\n\n            return (\n              <div className=\"sprint-ending-area\">\n                <h2>What do you want to do next?</h2>\n                <button\n                    id=\"sprint-retry\"\n                    onClick={props.retrySprint}\n                    >\n                    Retry the Same Sprint\n               </button>\n\n                <button\n                    id=\"sprint-different-settings\"\n                    onClick={props.newSprint}\n                    >\n                    Do a Different Sprint\n               </button>\n\n                <button\n                  onClick={e =>\n                    window.confirm(\n                      \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n                    ) && props.startOver(e)\n                  }\n                >\n                  Start Over\n                </button>\n              </div>\n            );\n\n}\n\nexport default SprintEnding;\n","import React from \"react\";\nimport \"./App.css\";\n\n\nclass Timer extends React.Component {\n       constructor(props) {\n         super(props);\n         this.state = {\n           timeRemaining: props.lengthOfSprint\n         };\n\n         this.tick = this.tick.bind(this);\n\n       }\n\n\n     tick() {\n          if(this.state.timeRemaining > 0) {\n                this.setState(prevState => ({\n                  timeRemaining: prevState.timeRemaining - 1\n                }))\n              } else {\n                   console.log('TIMES UP');\n                   this.props.endSprint();\n                clearInterval(this.interval);\n              }\n        }\n\n     componentDidMount() {\n       this.interval = setInterval(() => this.tick(), 1000);\n     }\n\n     componentWillUnmount() {\n          clearInterval(this.tick);\n     }\n\n     render() {\n\n            return (\n\n                 <div className=\"timer-area\">\n                    <h2>Time Remaining: {this.state.timeRemaining}</h2>\n                 </div>\n\n            );\n\n       }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport Score from \"./Score.js\";\nimport SprintSettings from \"./SprintSettings.js\";\nimport SprintSummary from \"./SprintSummary.js\";\nimport SprintEnding from \"./SprintEnding.js\";\nimport Timer from \"./Timer.js\";\nimport \"./App.css\";\n\nimport { faFlagCheckered, faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass SprintArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      getStarted: false,\n      typeOfProblem: \"addition\",\n      timeStarted: null,\n      timeRemaining: null,\n      lengthOfSprint: 60,\n      difficulty: \"easy\",\n      showSummary: false,\n      postSprintSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      answerList: []\n    };\n\n    this.getStarted = this.getStarted.bind(this);\n    this.setQuestionType = this.setQuestionType.bind(this);\n    this.setQuestionDifficulty = this.setQuestionDifficulty.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.endSprint = this.endSprint.bind(this);\n    this.retrySprint = this.retrySprint.bind(this);\n    this.newSprint = this.newSprint.bind(this);\n    this.setSprintLength = this.setSprintLength.bind(this);\n\n  }\n\n\n  getStarted(event) {\n       event.preventDefault();\n           this.setState({\n                getStarted: true,\n                timeStarted: Date.now(),\n                startTime: Date.now(),\n                timeRemaining: this.state.lengthOfSprint\n           });\n      console.log(\"getStarted - \" + this.state.timeRemaining);\n }\n\n endSprint(event) {\n          this.setState({\n               getStarted: false,\n               timeStarted: null,\n               postSprintSummary: true,\n          });\n     console.log(\"endSprint\");\n}\n\nretrySprint(event) {\n     event.preventDefault();\n         this.setState({\n              getStarted: true,\n              timeStarted: Date.now(),\n              startTime: Date.now(),\n              numberCorrect: null,\n             totalNumQuestions: null,\n             answerList: [],\n              timeRemaining: this.state.lengthOfSprint\n         });\n    console.log(\"RETRY SPRINT\");\n}\n\nnewSprint(event) {\n     event.preventDefault();\n         this.setState({\n              getStarted: false,\n              numberCorrect: null,\n             totalNumQuestions: null,\n             answerList: [],\n              timeRemaining: null,\n              postSprintSummary: false,\n         });\n    console.log(\"NEW SPRINT\");\n}\n\n  setQuestionType(event) {\n    this.setState({\n         typeOfProblem: event.value\n     });\n    console.log(\"setQuestionType\");\n  }\n\n  setQuestionDifficulty(event) {\n    this.setState({\n         difficulty: event.value\n     });\n    console.log(\"setQuestionDifficulty\");\n  }\n\n  setSprintLength(event) {\n       this.setState({\n           lengthOfSprint: event.value\n       });\n      console.log(\"setSprintLength\");\n }\n\n  answerSubmit(answerObj) {\n\n       this.setState({ startTime: Date.now() });\n\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState(prevState => {\n      return { totalNumQuestions: prevState.totalNumQuestions + 1 };\n    });\n\n    if (answerObj.isCorrect === true) {\n      this.setState(prevState => {\n        return { numberCorrect: prevState.numberCorrect + 1 };\n      });\n    }\n  }\n\n\n\n\n  render() {\n\n       console.log(this.props.currentColorScheme);\n       const currentColorScheme = this.props.currentColorScheme;\n\n    if (this.state.getStarted === true) {\n         console.log(\"getStarted - \" + this.state.timeRemaining);\n\n      return (\n        <div className=\"clb-sprint-active\">\n        <Timer timeStarted={this.state.timeStarted} endSprint={this.endSprint} lengthOfSprint={this.state.lengthOfSprint} />\n          <h2 className=\"quiz-active-message sprint\">SPRINT: Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n            {this.state.difficulty} &middot; {this.state.typeOfProblem}\n          </div>\n          <QuizBody\n               isSprint={true}\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            startTime={this.state.startTime}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n        </div>\n      );\n} else if (this.state.postSprintSummary === true) {\n     return (\n       <>\n         <h3 className=\"sprint-complete-message\">You Completed Your Sprint <FontAwesomeIcon icon={faCheckSquare} /></h3>\n         <Score\n           numberCorrect={this.state.numberCorrect}\n           totalNumQuestions={this.state.totalNumQuestions}\n         />\n         <SprintSummary\n               answerList={this.state.answerList}\n         />\n         <SprintEnding\n               startOver={this.props.startOver}\n               retrySprint={this.retrySprint}\n               newSprint={this.newSprint}\n          />\n       </>\n     );\n    } else {\n      return (\n        <>\n          <div className=\"settings-container-sprints\">\n             <SprintSettings\n               viewSettings={this.state.viewSettings}\n               toggleViewSettings={this.offCanvasClick}\n               setQuestionType={this.setQuestionType}\n               setQuestionDifficulty={this.setQuestionDifficulty}\n               typeOfProblem={this.state.typeOfProblem}\n               difficulty={this.state.difficulty}\n               setSprintLength={this.setSprintLength}\n               resetColors={this.props.resetColors}\n               currentColorScheme={currentColorScheme}\n               changeColors={this.props.changeColors}\n               startOver={this.props.startOver}\n               />\n             </div>\n          <button onClick={this.getStarted} id=\"clb-lets-go\">\n            Start Now <FontAwesomeIcon icon={faFlagCheckered} />\n          </button>\n        </>\n      );\n    }\n  }\n}\n\nexport default SprintArea;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport QuizAlert from \"./QuizAlert.js\";\nimport Score from \"./Score.js\";\nimport Settings from \"./Settings.js\";\nimport Summary from \"./Summary.js\";\nimport SprintArea from \"./SprintArea.js\";\nimport \"./App.css\";\n\nimport { faFlagCheckered, faCog, faTools } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { OffCanvas, OffCanvasMenu } from \"react-offcanvas\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSprint: false,\n      isActive: false,\n      isMenuOpened: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"easy\",\n      startTime: null,\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      streak: 0,\n      answerList: []\n    };\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.startOver = this.startOver.bind(this);\n    this.setQuestionType = this.setQuestionType.bind(this);\n    this.setQuestionDifficulty = this.setQuestionDifficulty.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.showSummarytoUser = this.showSummarytoUser.bind(this);\n    this.hideSummaryfromUser = this.hideSummaryfromUser.bind(this);\n    this.offCanvasClick = this.offCanvasClick.bind(this);\n    this.startSprint = this.startSprint.bind(this);\n\n  }\n\n\n\n  startSprint(event) {\n       event.preventDefault();\n      this.setState({\n           isSprint: true,\n           startTime: Date.now(),\n      });\n      console.log(\"startSprint\");\n }\n\n  startQuiz(event) {\n    event.preventDefault();\n    this.setState({\n         isSprint: false,\n         isActive: true,\n         startTime: Date.now(),\n    });\n    console.log(\"startQuiz\");\n  }\n\n\n  startOver(event) {\n    event.preventDefault();\n    this.props.resetColors(event);\n    this.props.resetName(event);\n\n    this.setState({\n      isSprint: false,\n      isActive: false,\n      isMenuOpened: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"easy\",\n      startTime: null,\n      backgroundColors: \"blue\",\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      streak: 0,\n      answerList: []\n    });\n\n    console.log(\"startOver\");\n  }\n\n  setQuestionType(event) {\n    this.setState({ typeOfProblem: event.value,\n         startTime: Date.now()\n     });\n    console.log(\"setQuestionType\");\n  }\n\n  setQuestionDifficulty(event) {\n    this.setState({\n         difficulty: event.value,\n         startTime: Date.now()\n     });\n    console.log(\"setQuestionDifficulty\");\n  }\n\n  showSummarytoUser(event) {\n    event.preventDefault();\n    this.setState({\n         showSummary: true,\n         startTime: Date.now()\n     });\n    console.log(\"showSummarytoUser\");\n  }\n\n  hideSummaryfromUser(event) {\n    event.preventDefault();\n    this.setState({\n         showSummary: false,\n         startTime: Date.now()\n     });\n    console.log(\"hideSummaryfromUser\");\n  }\n\n  answerSubmit(answerObj) {\n\n       this.setState({ startTime: Date.now() });\n\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState(prevState => {\n      return { totalNumQuestions: prevState.totalNumQuestions + 1 };\n    });\n\n    if (answerObj.isCorrect === true) {\n      this.setState(prevState => {\n        return {\n             numberCorrect: prevState.numberCorrect + 1,\n             streak: prevState.streak + 1,\n             };\n           });\n     } else {\n\n          this.setState(prevState => {\n            return {\n                 streak: 0,\n            };\n          });\n\n     }\n       }\n\n\n  offCanvasClick() {\n    // toggles the menu opened state\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\n  }\n\n\n\n  render() {\n\n       console.log(this.props.currentColorScheme);\n       const currentColorScheme = this.props.currentColorScheme;\n\n    if (this.state.isActive === true) {\n      return (\n        <>\n             <QuizAlert\n                  streak={this.state.streak}\n                  answerList={this.state.answerList}\n                  numberCorrect={this.state.numberCorrect}\n                  totalNumQuestions={this.state.totalNumQuestions}\n             />\n          <h2 className=\"quiz-active-message\">Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n            {this.state.difficulty} &middot; {this.state.typeOfProblem}\n          </div>\n\n          <div className=\"clb-settings hidden\">\n             <button onClick={this.offCanvasClick}>\n               <FontAwesomeIcon icon={faCog} /> Show Settings\n             </button>\n          </div>\n\n          <OffCanvas\n             width={400}\n             transitionDuration={1000}\n             effect={\"overlay\"}\n             isMenuOpened={this.state.isMenuOpened}\n             position={\"right\"}\n           >\n             <OffCanvasMenu className=\"off-canvas-menu\">\n               <div className=\"settings-container\">\n                  <Settings\n                    viewSettings={this.state.viewSettings}\n                    toggleViewSettings={this.offCanvasClick}\n                    setQuestionType={this.setQuestionType}\n                    setQuestionDifficulty={this.setQuestionDifficulty}\n                    typeOfProblem={this.state.typeOfProblem}\n                    difficulty={this.state.difficulty}\n                    showSummary={this.state.showSummary}\n                    showSummarytoUser={this.showSummarytoUser}\n                    hideSummaryfromUser={this.hideSummaryfromUser}\n                    startOver={this.startOver}\n                    resetColors={this.props.resetColors}\n                    currentColorScheme={currentColorScheme}\n                    changeColors={this.props.changeColors}\n                  />\n                  </div>\n             </OffCanvasMenu>\n      </OffCanvas>\n\n          <QuizBody\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            streak={this.state.streak}\n            startTime={this.state.startTime}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n          <Score\n            numberCorrect={this.state.numberCorrect}\n            totalNumQuestions={this.state.totalNumQuestions}\n          />\n          <Summary\n           answerList={this.state.answerList}\n           showSummary={this.state.showSummary}\n          />\n        </>\n      );\n} else if (this.state.isSprint === true) {\n\n     return (\n       <>\n          <div className=\"clb-sprint-area\">\n          <SprintArea\n               resetColors={this.props.resetColors}\n               currentColorScheme={currentColorScheme}\n               changeColors={this.props.changeColors}\n               startOver={this.startOver}\n               numberCorrect={this.state.numberCorrect}\n               totalNumQuestions={this.state.totalNumQuestions}\n               startTime={this.state.startTime}\n          />\n         </div>\n       </>\n     );\n\n} else {\n      return (\n        <>\n          <button onClick={this.startQuiz} id=\"start-quiz\">\n            Practice Laps (Open Practice) <FontAwesomeIcon icon={faTools} />\n          </button>\n          <button onClick={this.startSprint} id=\"start-sprints\">\n            Race (Math Sprints) <FontAwesomeIcon icon={faFlagCheckered} />\n          </button>\n        </>\n      );\n    }\n  }\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction NameForm(props) {\n\n     const handleNameSubmit = props.handleNameSubmit;\n     const handleNameChange = props.handleNameChange;\n\n     if( props.nameFormActive === true ) {\n\n       return (\n            <>\n              <form id=\"name-form\" onSubmit={handleNameSubmit} >\n                <label>\n                What's Your Name?\n                  <input type=\"text\" onChange={handleNameChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n              </form>\n         </>\n       );\n\n     } else {\n\n           return (\n                 <>\n                 <div className=\"clb-welcome-area\">\n                 <p>Welcome, {props.name}</p>\n                 </div>\n                   </>\n           );\n\n     }\n\n}\n\nexport default NameForm;\n","import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faHeart,\n  faCoffee,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarFooter() {\n  return (\n    <footer className=\"clb-footer\">\n\n    <p className=\"version\">Version 0.7 - Nov 22, 2019</p>\n      <p>\n        Made by Chris with\n        <span className=\"header-icons\">\n          <FontAwesomeIcon icon={faHeart} />\n          <FontAwesomeIcon icon={faCoffee} />\n        </span>\n      </p>\n    </footer>\n  );\n}\n\nexport default RacecarFooter;\n","import React from \"react\";\nimport RacecarHeader from \"./RacecarHeader\";\nimport Quiz from \"./Quiz\";\nimport NameForm from \"./NameForm.js\";\nimport RacecarFooter from \"./RacecarFooter\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorScheme: { value: 'blue', label: 'Blue' },\n      name: null,\n      nameFormActive: true,\n    };\n\n    this.changeColors = this.changeColors.bind(this);\n    this.resetColors = this.resetColors.bind(this);\n    this.resetName = this.resetName.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleNameSubmit = this.handleNameSubmit.bind(this);\n\n  }\n\n  resetName(event) {\n       this.setState({\n            name: null,\n            nameFormActive: true\n       });\n       console.log(\"RESET NAME\");\n }\n\n  changeColors(event) {\n      console.log(event);\n      this.setState({ colorScheme: event });\n  }\n\n  resetColors(event) {\n       this.setState({\n            colorScheme: { value: 'blue', label: 'Blue' }\n       });\n       console.log('RESET COLORS');\n }\n\n\n handleNameChange(event) {\n     event.preventDefault();\n     console.log(event.target.value);\n     this.setState({\n          name: event.target.value\n     });\n }\n\n\n handleNameSubmit(event) {\n   event.preventDefault();\n   this.setState({\n        nameFormActive: false\n   });\n }\n\n  render() {\n    let appClasses = \"App racecar-math \" + this.state.colorScheme.value;\n\n    //console.log('Current Name: ' + this.state.name);\n\n    return (\n      <div className={appClasses}>\n        <RacecarHeader />\n        <NameForm\n            name={this.state.name}\n            nameFormActive={this.state.nameFormActive}\n            handleNameChange={this.handleNameChange}\n            handleNameSubmit={this.handleNameSubmit}\n        />\n        <Quiz\n               changeColors={this.changeColors}\n               currentColorScheme={this.state.colorScheme.value}\n               resetColors={this.resetColors}\n               resetName={this.resetName}\n          />\n        <RacecarFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// get our fontawesome imports\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}