{"version":3,"sources":["RacecarHeader.js","QuizProblem.js","QuizBody.js","QuizAlert.js","Score.js","Settings.js","Summary.js","SprintSettings.js","SprintSummary.js","SprintEnding.js","Timer.js","SprintArea.js","Quiz.js","NameForm.js","RacecarFooter.js","App.js","serviceWorker.js","index.js"],"names":["RacecarHeader","props","state","timer","showIcon","this","timerID","setInterval","tick","clearInterval","setState","prevState","className","icon","faCarSide","href","onClick","e","window","confirm","React","Component","QuizProblem","value","handleChange","bind","handleSubmit","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","event","target","typeOfProblem","streak","difficulty","num1","num2","problem","completedProblem","correctAnswer","parseInt","answer","answerSubmit","isCorrect","elapsed","Date","now","startTime","formattedElapsed","preventDefault","refs","quizInput","focus","onSubmit","id","ref","type","min","step","pattern","autoFocus","onChange","required","QuizBody","isSprint","answerList","prevAnswerArray","i","length","currentAnswer","prevAnswer","push","randomIntFromInterval","max","random","arraysMatch","arr1","arr2","doOver","testCurrentProblem","console","log","match","QuizAlert","message","role","aria-label","totalNumQuestions","numberCorrect","Score","score","correctToPublish","Settings","showSummary","showSummaryYes","showSummarytoUser","showSummaryNo","hideSummaryfromUser","colorSchemeOptions","label","defaultValue","currentColorScheme","questionTypeOptions","defaultQuestionType","difficultyOptions","defaultDifficulty","options","changeColors","setQuestionType","setQuestionDifficulty","startOver","toggleViewSettings","faCog","Summary","items","map","item","index","key","faCheckSquare","faTimesCircle","SprintSettings","sprintLength","defaultSprintLength","setSprintLength","SprintSummary","SprintEnding","retrySprint","newSprint","startQuiz","Timer","timeRemaining","lengthOfSprint","endSprint","interval","color","SprintArea","getStarted","timeStarted","postSprintSummary","answerObj","viewSettings","offCanvasClick","resetColors","faFlagCheckered","Quiz","isActive","isMenuOpened","isTimed","startSprint","removeNameEntry","resetName","backgroundColors","width","transitionDuration","effect","position","faTools","NameForm","name","handleNameSubmit","handleNameChange","nameFormActive","RacecarFooter","faAbacus","rel","App","colorScheme","appClasses","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c37ea10c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\nimport {\n  faCarSide,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass RacecarHeader extends React.Component {\n\n     constructor(props) {\n         super(props);\n         this.state = {\n              timer: 0,\n              showIcon: true,\n         };\n  }\n\ncomponentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n       this.setState(prevState => {\n        return { timer: prevState.timer + 1 };\n      });\n  }\n\n  render() {\n\n\n       return (\n         <header className=\"App-header\">\n\n         { this.state.timer <= 62 &&\n             <div className=\"header-icons\">\n              <FontAwesomeIcon icon={faCarSide} />\n             </div>\n          }\n\n           <a href=\"http://racecarmath.org/\" onClick={e =>\n            window.confirm(\n               \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n            )\n           }><h1>Racecar Math</h1></a>\n         </header>\n       );\n     }\n\n}\n\nexport default RacecarHeader;\n","import React from \"react\";\nimport \"./App.css\";\n\nclass QuizProblem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.millisToMinutesAndSeconds = this.millisToMinutesAndSeconds.bind(this);\n\n  }\n\n\n  millisToMinutesAndSeconds(millis) {\n       var minutes = Math.floor(millis / 60000);\n       var seconds = ((millis % 60000) / 1000).toFixed(1);\n       return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    // event.preventDefault();\n    // alert(\"QuizProblem handleSubmit: \" + this.state.value);\n\n    const typeOfProblem = this.props.typeOfProblem;\n    const streak = this.props.streak;\n    const difficulty = this.props.difficulty;\n    const num1 = this.props.num1;\n    const num2 = this.props.num2;\n    const problem = this.props.problem;\n    const completedProblem = this.props.completedProblem;\n    const correctAnswer = parseInt(this.props.answer);\n    const answerSubmit = parseInt(this.state.value);\n    var isCorrect = null;\n    if (answerSubmit === correctAnswer) {\n      isCorrect = true;\n    } else {\n      isCorrect = false;\n    }\n\n\n    const endTime = Date.now();\n    const startTime = this.props.startTime;\n    const elapsed = endTime - startTime;\n    const formattedElapsed = this.millisToMinutesAndSeconds(elapsed);\n    // console.log('ELAPSED: ' + formattedElapsed);\n\n    const answer = {\n      typeOfProblem,\n      difficulty,\n      num1,\n      num2,\n      problem,\n      completedProblem,\n      correctAnswer,\n      answerSubmit,\n      elapsed,\n      formattedElapsed,\n      isCorrect,\n      streak\n    };\n\n    this.props.answerSubmit(answer);\n    this.setState({ value: \"\" });\n\n    //let end = Date.now();\n\n    event.preventDefault();\n  }\n\n  componentDidUpdate(){\n       //console.log('componentDidUpdate');\n       this.refs.quizInput.focus();\n     }\n\n// componentDidMount() {\n//      let start = Date.now();\n//      console.log('Mounted / Start Time: ' + start);\n// }\n\n  render() {\n\n    return (\n      <div className=\"clb-quiz-problem-area\">\n        <div className=\"math-problem-numbers\">{this.props.problem}</div>\n        <form onSubmit={this.handleSubmit} id=\"math-answer-form\">\n          <label>\n            Your Answer:\n            <input\n               ref=\"quizInput\"\n              type=\"number\"\n              min=\"0\"\n              step=\"1\"\n              pattern=\"[0-9]\"\n              autoFocus={true}\n              value={this.state.value}\n              onChange={this.handleChange}\n              required\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default QuizProblem;\n","import React from \"react\";\nimport QuizProblem from \"./QuizProblem\";\nimport \"./App.css\";\n\nfunction QuizBody(props) {\n     const isSprint = props.isSprint;\n     const typeOfProblem = props.typeOfProblem;\n     const difficulty = props.difficulty;\n     const answerSubmit = props.answerSubmit;\n     const answerList = props.answerList;\n     const startTime = props.startTime;\n     const streak = props.streak;\n\n     let prevAnswerArray = [];\n     for (let i = 0; i < answerList.length; i++) {\n          let currentAnswer = answerList[i];\n          let prevNum1 = currentAnswer.num1;\n          let prevNum2 = currentAnswer.num2;\n          let prevAnswer = [prevNum1, prevNum2];\n          prevAnswerArray.push(prevAnswer);\n     }\n\n  let problem = null;\n  let num1 = null;\n  let num2 = null;\n  let answer = null;\n  let completedProblem = null;\n\n  function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n\n  function arraysMatch(arr1, arr2) {\n\n\t// Check if the arrays are the same length\n\tif (arr1.length !== arr2.length) return false;\n\n\t// Check if all items exist and are in the same order\n\tfor (var i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i]) return false;\n\t}\n\n\t// Otherwise, return true\n\treturn true;\n\n};\n\n\n// addition\nif (typeOfProblem === \"addition\") {\n\n     let doOver = null;\n\n     do {\n\n          doOver = false;\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(9, 100);\n               num2 = randomIntFromInterval(9, 100);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 12);\n               num2 = randomIntFromInterval(0, 12);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(25, 250);\n               num2 = randomIntFromInterval(25, 250);\n          }\n          answer = num1 + num2;\n          problem = num1 + \" + \" + num2 + \" = ?\";\n          completedProblem = num1 + \" + \" + num2 + \" = \" + answer;\n\n          // Make sure no problems are repeated in Sprint Mode\n          let testCurrentProblem = [num1, num2];\n\n          if( isSprint ) {\n\n               for (let i = 0; i < prevAnswerArray.length; i++) {\n                    let match = arraysMatch(prevAnswerArray[i], testCurrentProblem);\n                    // console.log(match);\n                         if( match === true ) {\n                              console.log(\"Matched: \" + prevAnswerArray[i] + \" --- \" + testCurrentProblem);\n                              doOver = true;\n                         }\n               }\n\n          }\n\n     } while ( doOver === true );\n\n}\n// subtraction\nelse if (typeOfProblem === \"subtraction\") {\n\n     let doOver = null;\n\n     // loop to ensure a positive answer\n     do {\n\n          doOver = false;\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(10, 100);\n               num2 = randomIntFromInterval(10, 100);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 10);\n               num2 = randomIntFromInterval(0, 10);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(25, 250);\n               num2 = randomIntFromInterval(25, 250);\n          }\n          answer = num1 - num2;\n          problem = num1 + \" - \" + num2 + \" = ?\";\n          completedProblem = num1 + \" - \" + num2 + \" = \" + answer;\n\n               // Make sure no problems are repeated in Sprint Mode\n               let testCurrentProblem = [num1, num2];\n\n               if( isSprint ) {\n\n                    for (let i = 0; i < prevAnswerArray.length; i++) {\n                         let match = arraysMatch(prevAnswerArray[i], testCurrentProblem);\n                         console.log(match);\n                              if( match === true ) {\n                                   console.log(\"Matched: \" + prevAnswerArray[i] + \" --- \" + testCurrentProblem);\n                                   doOver = true;\n                              }\n                    }\n\n               }\n\n     } while ( answer <= 0 || doOver === true );\n\n}\n// multiplication\nelse if (typeOfProblem === \"multiplication\") {\n\n     let doOver = null;\n\n     do {\n\n          doOver = false;\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(3, 12);\n               num2 = randomIntFromInterval(3, 12);\n          } else if (difficulty === \"easy\") {\n               num1 = randomIntFromInterval(0, 8);\n               num2 = randomIntFromInterval(0, 8);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(4, 24);\n               num2 = randomIntFromInterval(4, 24);\n          }\n          answer = num1 * num2;\n          problem = num1 + \" × \" + num2 + \" = ?\";\n          completedProblem = num1 + \" × \" + num2 + \" = \" + answer;\n\n          // Make sure no problems are repeated in Sprint Mode\n          let testCurrentProblem = [num1, num2];\n\n          if( isSprint ) {\n\n               for (let i = 0; i < prevAnswerArray.length; i++) {\n                    let match = arraysMatch(prevAnswerArray[i], testCurrentProblem);\n                    console.log(match);\n                         if( match === true ) {\n                              console.log(\"Matched: \" + prevAnswerArray[i] + \" --- \" + testCurrentProblem);\n                              doOver = true;\n                         }\n               }\n\n          }\n\n     } while ( doOver === true );\n\n}\n// division\nelse if ( typeOfProblem === \"division\" && difficulty === 'easy' ) {\n\n     let doOver = null;\n\n     // loop to ensure an integer answer\n     do {\n\n          doOver = false;\n\n          num1 = randomIntFromInterval(0, 24);\n          num2 = randomIntFromInterval(1, 8);\n\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n          // Make sure no problems are repeated in Sprint Mode\n          let testCurrentProblem = [num1, num2];\n\n          if( isSprint ) {\n\n               for (let i = 0; i < prevAnswerArray.length; i++) {\n                    let match = arraysMatch(prevAnswerArray[i], testCurrentProblem);\n                    console.log(match);\n                         if( match === true ) {\n                              console.log(\"Matched: \" + prevAnswerArray[i] + \" --- \" + testCurrentProblem);\n                              doOver = true;\n                         }\n               }\n\n          }\n\n     } while ( ((answer - Math.floor(answer)) !== 0) || (doOver === true) );\n\n} else if (typeOfProblem === \"division\") {\n\n     var doOver = null;\n\n     // loop to ensure an integer answer\n     do {\n\n          doOver = false;\n\n          if(difficulty === \"medium\") {\n               num1 = randomIntFromInterval(3, 120);\n               num2 = randomIntFromInterval(2, 15);\n          } else if (difficulty === \"hard\") {\n               num1 = randomIntFromInterval(12, 300);\n               num2 = randomIntFromInterval(5, 150);\n          }\n          answer = num1 / num2;\n          problem = num1 + \" ÷ \" + num2 + \" = ?\";\n          completedProblem = num1 + \" ÷ \" + num2 + \" = \" + answer;\n\n          // Make sure no problems are repeated in Sprint Mode\n          let testCurrentProblem = [num1, num2];\n\n          if( isSprint ) {\n\n               for (let i = 0; i < prevAnswerArray.length; i++) {\n                    let match = arraysMatch(prevAnswerArray[i], testCurrentProblem);\n                    console.log(match);\n                         if( match === true ) {\n                              console.log(\"Matched: \" + prevAnswerArray[i] + \" --- \" + testCurrentProblem);\n                              doOver = true;\n                         }\n               }\n\n          }\n\n     } while ( ((answer - Math.floor(answer)) !== 0) || (num1 === num2) || (doOver === true) );\n\n}\n\n\n\n\n  // /console.log(\"answerList: \" + JSON.stringify(answerList));\n\n  return (\n    <main className=\"clb-quiz-body-area\">\n      <QuizProblem\n        typeOfProblem={typeOfProblem}\n        difficulty={difficulty}\n        startTime={startTime}\n        answerSubmit={answerSubmit}\n        num1={num1}\n        num2={num2}\n        answer={answer}\n        problem={problem}\n        completedProblem={completedProblem}\n        streak={streak}\n      />\n    </main>\n  );\n}\n\nexport default QuizBody;\n","import React from \"react\";\nimport \"./App.css\";\n\n\nfunction QuizAlert(props) {\n\n     let message = null;\n\n     // Correct Streaks\n     if( props.streak === 3 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success three\">3 in a row! <span role=\"img\" aria-label=\"emoji\">😄</span></div></div>\n     } else if ( props.streak === 4 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success four\">4 in a row! <span role=\"img\" aria-label=\"emoji\">🤩</span></div></div>\n     } else if ( props.streak === 5 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success five\">5 in a row! You're on fire! <span role=\"img\" aria-label=\"emoji\">🔥🔥🔥🔥🔥</span></div></div>\n     } else if ( props.streak === 10 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success ten\">That's 10 in a row! <span role=\"img\" aria-label=\"emoji\">🥳🎉👏</span><div className=\"what-next\">Are you ready for a bigger challenge?<br/>Use the settings to choose another type of problem or difficulty.</div></div></div>\n     } else if ( props.streak === 20 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"success twenty\">Too easy! That's 20 in a row! <span role=\"img\" aria-label=\"emoji\">🥳🥳🎉🎉👏👏</span><div className=\"what-next\">Are you ready for a bigger challenge?<br/>Use the settings to choose another type of problem or difficulty.</div></div></div>\n     }\n\n     // Too Hard\n     if( props.totalNumQuestions > 9 && props.numberCorrect < 3 ) {\n          message = <div className=\"clb-quiz-alert\"><div className=\"failure\">Looks like you're having a hard time. Would you like to try a different problem? Use the settings to change it up.</div></div>\n     }\n\n  return (\n\n       <>\n      {message}\n      </>\n\n  );\n\n}\n\nexport default QuizAlert;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Score(props) {\n\n     const score = Math.floor((props.numberCorrect / props.totalNumQuestions) * 100);\n\n     let correctToPublish = 0;\n     if( props.numberCorrect > 0 ) {\n          correctToPublish = props.numberCorrect;\n     }\n\n     if( props.totalNumQuestions > 0 ) {\n          return (\n               <div className=\"score-area\">\n                    <h2 className=\"current-score\">Score: {score}%</h2>\n                    <div className=\"score-detail answered\">Answered: {props.totalNumQuestions}</div>\n                    <div className=\"score-detail correct\">Correct: {correctToPublish}</div>\n               </div>\n          );\n     } else {\n          return null;\n     }\n\n}\n\nexport default Score;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Select from 'react-select';\n\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction Settings(props) {\n\n\n  // Summary Buttons ------------------- //\n  let showSummary = props.showSummary;\n  let showSummaryYes = (\n    <button onClick={props.showSummarytoUser} className=\"show-summary true\">\n      Yes\n    </button>\n  );\n  let showSummaryNo = (\n    <button onClick={props.hideSummaryfromUser} className=\"show-summary false\">\n      No\n    </button>\n  );\n\n  if (showSummary === true) {\n    showSummaryYes = (\n      <button\n        onClick={props.showSummarytoUser}\n        className=\"show-summary true active\"\n      >\n        Yes\n      </button>\n    );\n  }\n  if (showSummary === false) {\n    showSummaryNo = (\n      <button\n        onClick={props.hideSummaryfromUser}\n        className=\"show-summary false active\"\n      >\n        No\n      </button>\n    );\n  }\n\n\n\n       // Color Scheme -- SELECT\n       const colorSchemeOptions = [\n            { value: 'blue', label: 'Blue' },\n            { value: 'pink', label: 'Pink' },\n            { value: 'orange', label: 'Orange' },\n            { value: 'green', label: 'Green' }\n       ];\n       var defaultValue = colorSchemeOptions[0];\n       if( props.currentColorScheme === 'pink' ) { defaultValue = colorSchemeOptions[1]; }\n       if( props.currentColorScheme === 'orange' ) { defaultValue = colorSchemeOptions[2]; }\n       if( props.currentColorScheme === 'green' ) { defaultValue = colorSchemeOptions[3]; }\n\n\n       // Type of Question -- SELECT\n       const questionTypeOptions = [\n            { value: 'addition', label: '+ Addition' },\n            { value: 'subtraction', label: '– Subtraction' },\n            { value: 'multiplication', label: '× Multiplication' },\n            { value: 'division', label: '÷ Divison' }\n       ];\n\n       var defaultQuestionType = questionTypeOptions[0];\n       if( props.typeOfProblem === 'subtraction' ) { defaultQuestionType = questionTypeOptions[1]; }\n       if( props.typeOfProblem === 'multiplication' ) { defaultQuestionType = questionTypeOptions[2]; }\n       if( props.typeOfProblem === 'division' ) { defaultQuestionType = questionTypeOptions[3]; }\n\n\n       // Difficulty -- SELECT\n       const difficultyOptions = [\n            { value: 'easy', label: 'Easy' },\n            { value: 'medium', label: 'Medium' },\n            { value: 'hard', label: 'Hard' }\n       ];\n\n       var defaultDifficulty = difficultyOptions[0];\n       if( props.difficulty === 'medium' ) { defaultDifficulty = difficultyOptions[1]; }\n       if( props.difficulty === 'hard' ) { defaultDifficulty = difficultyOptions[2]; }\n\n    return (\n      <div className=\"clb-settings revealed\">\n        <div className=\"single-setting-area colors\">\n          <h3>Racecar Colors</h3>\n          <Select options={colorSchemeOptions} defaultValue={defaultValue} onChange={props.changeColors} id=\"choose-colors-select\" />\n        </div>\n        <div className=\"single-setting-area question-types\">\n          <h3>Type of Math</h3>\n          <Select options={questionTypeOptions} defaultValue={defaultQuestionType} onChange={props.setQuestionType} id=\"question-type-select\" />\n        </div>\n        <div className=\"single-setting-area difficulty\">\n          <h3>Difficulty</h3>\n          <Select options={difficultyOptions} defaultValue={defaultDifficulty} onChange={props.setQuestionDifficulty} id=\"difficulty-select\" />\n        </div>\n        <div className=\"single-setting-area\">\n          <h3>Show Summary?</h3>\n          {showSummaryYes}\n          {showSummaryNo}\n        </div>\n        <div className=\"single-setting-area start-over\">\n          <button\n            onClick={e =>\n              window.confirm(\n                \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n              ) && props.startOver(e)\n            }\n          >\n            Start Over\n          </button>\n        </div>\n        <button onClick={props.toggleViewSettings} id=\"hide-settings\">\n          <FontAwesomeIcon icon={faCog} /> Hide Settings\n        </button>\n      </div>\n    );\n  \n}\n\nexport default Settings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare,\n          faTimesCircle\n } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction Summary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, index) =>\n               <div className=\"single-answer\" key={index} ><div className=\"question-number\">Question {index+1}</div>\n                    {item.isCorrect === true &&\n                    <div className=\"single-answer-result correct\">\n                              <div className=\"correct-answer\">{item.completedProblem}\n                                 <span className=\"summary-correct\">\n                                   <FontAwesomeIcon icon={faCheckSquare} />\n                                 </span>\n                            </div>\n                            </div>\n                     }\n                     {item.isCorrect === false &&\n                          <div className=\"single-answer-result incorrect\">\n                               <div className=\"correct-answer\">{item.completedProblem}\n                             <span className=\"summary-wrong\">\n                               <FontAwesomeIcon icon={faTimesCircle} />\n                             </span>\n                        </div>\n                        <div className=\"single-answer-user\">Your Answer: {item.answerSubmit}</div>\n                        </div>\n                      }\n               <div className=\"single-answer-user time-elapsed\">Time {item.formattedElapsed}</div>\n               </div>);\n\n     if(props.showSummary) {\n\n            return (\n              <div className=\"summary-area\">\n                <h2>Your Answers</h2>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n       } else {\n            return (<div className=\"summary-hidden\"></div>);\n       }\n}\n\nexport default Summary;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Select from 'react-select';\n\nfunction SprintSettings(props) {\n\n       // Color Scheme -- SELECT\n       const colorSchemeOptions = [\n            { value: 'blue', label: 'Blue' },\n            { value: 'pink', label: 'Pink' },\n            { value: 'orange', label: 'Orange' },\n            { value: 'green', label: 'Green' }\n       ];\n       var defaultValue = colorSchemeOptions[0];\n       if( props.currentColorScheme === 'pink' ) { defaultValue = colorSchemeOptions[1]; }\n       if( props.currentColorScheme === 'orange' ) { defaultValue = colorSchemeOptions[2]; }\n       if( props.currentColorScheme === 'green' ) { defaultValue = colorSchemeOptions[3]; }\n\n\n       // Type of Question -- SELECT\n       const questionTypeOptions = [\n            { value: 'addition', label: '+ Addition' },\n            { value: 'subtraction', label: '– Subtraction' },\n            { value: 'multiplication', label: '× Multiplication' },\n            { value: 'division', label: '÷ Divison' }\n       ];\n\n       var defaultQuestionType = questionTypeOptions[0];\n       if( props.typeOfProblem === 'subtraction' ) { defaultQuestionType = questionTypeOptions[1]; }\n       if( props.typeOfProblem === 'multiplication' ) { defaultQuestionType = questionTypeOptions[2]; }\n       if( props.typeOfProblem === 'division' ) { defaultQuestionType = questionTypeOptions[3]; }\n\n\n       // Difficulty -- SELECT\n       const difficultyOptions = [\n            { value: 'easy', label: 'Easy' },\n            { value: 'medium', label: 'Medium' },\n            { value: 'hard', label: 'Hard' }\n       ];\n\n       var defaultDifficulty = difficultyOptions[0];\n       if( props.difficulty === 'medium' ) { defaultDifficulty = difficultyOptions[1]; }\n       if( props.difficulty === 'hard' ) { defaultDifficulty = difficultyOptions[2]; }\n\n\n       // Length of Sprint -- SELECT\n       const sprintLength = [\n            { value: 60, label: '1 Minute' },\n            { value: 90, label: '90 Seconds' },\n            { value: 120, label: '2 Minutes' }\n       ];\n\n       var defaultSprintLength = sprintLength[0];\n       if( props.difficulty === 90 ) { defaultSprintLength = sprintLength[1]; }\n       if( props.difficulty === 120 ) { defaultSprintLength = sprintLength[2]; }\n\n    return (\n      <div className=\"clb-sprint-settings\">\n        <div className=\"single-setting-area colors\">\n          <h3>Racecar Colors</h3>\n          <Select options={colorSchemeOptions} defaultValue={defaultValue} onChange={props.changeColors} id=\"choose-colors-select\" />\n        </div>\n        <div className=\"single-setting-area question-types\">\n          <h3>Type of Math</h3>\n          <Select options={questionTypeOptions} defaultValue={defaultQuestionType} onChange={props.setQuestionType} id=\"question-type-select\" />\n        </div>\n        <div className=\"single-setting-area difficulty\">\n          <h3>Difficulty</h3>\n          <Select options={difficultyOptions} defaultValue={defaultDifficulty} onChange={props.setQuestionDifficulty} id=\"difficulty-select\" />\n        </div>\n        <div className=\"single-setting-area sprint-length\">\n          <h3>Amount of Time</h3>\n          <Select options={sprintLength} defaultValue={defaultSprintLength} onChange={props.setSprintLength} id=\"sprint-length\" />\n        </div>\n        <div className=\"single-setting-area start-over\">\n          <button\n            onClick={e =>\n              window.confirm(\n                \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n              ) && props.startOver(e)\n            }\n          >\n            Start Over\n          </button>\n        </div>\n      </div>\n    );\n\n}\n\nexport default SprintSettings;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { faCheckSquare,\n          faTimesCircle\n } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nfunction SprintSummary(props) {\n\n     //Previous Answers: {JSON.stringify(props.answerList)}\n\n     const items = props.answerList.map((item, index) =>\n               <div className=\"single-answer\" key={index} ><div className=\"question-number\">Question {index+1}</div>\n                    {item.isCorrect === true &&\n                    <div className=\"single-answer-result correct\">\n                              <div className=\"correct-answer\">{item.completedProblem}\n                                 <span className=\"summary-correct\">\n                                   <FontAwesomeIcon icon={faCheckSquare} />\n                                 </span>\n                            </div>\n                            </div>\n                     }\n                     {item.isCorrect === false &&\n                          <div className=\"single-answer-result incorrect\">\n                               <div className=\"correct-answer\">{item.completedProblem}\n                             <span className=\"summary-wrong\">\n                               <FontAwesomeIcon icon={faTimesCircle} />\n                             </span>\n                        </div>\n                        <div className=\"single-answer-user\">Your Answer: {item.answerSubmit}</div>\n                        </div>\n                      }\n               <div className=\"single-answer-user time-elapsed\">Time {item.formattedElapsed}</div>\n               </div>);\n\n\n            return (\n              <div className=\"summary-area\">\n                <h2>Your Answers</h2>\n                <div className=\"summary\">\n                   {items}\n               </div>\n              </div>\n            );\n\n}\n\nexport default SprintSummary;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction SprintEnding(props) {\n\n     //const test = props.test;\n\n            return (\n              <div className=\"sprint-ending-area\">\n                <h2>What do you want to do next?</h2>\n                <button\n                    id=\"sprint-retry\"\n                    onClick={props.retrySprint}\n                    >\n                    Retry the Same Sprint\n               </button>\n\n                <button\n                    id=\"sprint-different-settings\"\n                    onClick={props.newSprint}\n                    >\n                    Do a Different Sprint\n               </button>\n\n               <button\n                   id=\"switch-to-practice\"\n                   onClick={props.startQuiz}\n                   >\n                   Do Some Practice Laps\n              </button>\n\n                <button\n                  onClick={e =>\n                    window.confirm(\n                      \"Are you sure you want to start over? Your name and score will be erased from this page.\"\n                    ) && props.startOver(e)\n                  }\n                >\n                  Start Over\n                </button>\n              </div>\n            );\n\n}\n\nexport default SprintEnding;\n","import React from \"react\";\nimport \"./App.css\";\n\n\nclass Timer extends React.Component {\n       constructor(props) {\n         super(props);\n         this.state = {\n           timeRemaining: props.lengthOfSprint\n         };\n\n         this.tick = this.tick.bind(this);\n\n       }\n\n\n     tick() {\n          if(this.state.timeRemaining > 0) {\n                this.setState(prevState => ({\n                  timeRemaining: prevState.timeRemaining - 1\n                }))\n              } else {\n                   this.props.endSprint();\n                clearInterval(this.interval);\n              }\n        }\n\n     componentDidMount() {\n       this.interval = setInterval(() => this.tick(), 1000);\n     }\n\n     componentWillUnmount() {\n          clearInterval(this.tick);\n     }\n\n     render() {\n\n          let color = 'regular';\n          if( this.state.timeRemaining < 10 ) {\n               color = 'red';\n          }\n\n            return (\n\n                 <div className={\"timer-area \" + color}>\n                    <h2><span className=\"time-remaining-text\">Time Remaining: </span><span className={\"tick-number \" + color}>{this.state.timeRemaining}</span></h2>\n                 </div>\n\n            );\n\n       }\n}\n\nexport default Timer;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport Score from \"./Score.js\";\nimport SprintSettings from \"./SprintSettings.js\";\nimport SprintSummary from \"./SprintSummary.js\";\nimport SprintEnding from \"./SprintEnding.js\";\nimport Timer from \"./Timer.js\";\nimport \"./App.css\";\n\nimport { faFlagCheckered, faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass SprintArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      getStarted: false,\n      typeOfProblem: \"addition\",\n      timeStarted: null,\n      timeRemaining: null,\n      lengthOfSprint: 60,\n      difficulty: \"easy\",\n      showSummary: false,\n      postSprintSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      answerList: []\n    };\n\n    this.getStarted = this.getStarted.bind(this);\n    this.setQuestionType = this.setQuestionType.bind(this);\n    this.setQuestionDifficulty = this.setQuestionDifficulty.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.endSprint = this.endSprint.bind(this);\n    this.retrySprint = this.retrySprint.bind(this);\n    this.newSprint = this.newSprint.bind(this);\n    this.setSprintLength = this.setSprintLength.bind(this);\n\n  }\n\n\n  getStarted(event) {\n       event.preventDefault();\n           this.setState({\n                getStarted: true,\n                timeStarted: Date.now(),\n                startTime: Date.now(),\n                timeRemaining: this.state.lengthOfSprint\n           });\n      \n }\n\n endSprint(event) {\n          this.setState({\n               getStarted: false,\n               timeStarted: null,\n               postSprintSummary: true,\n          });\n     console.log(\"endSprint\");\n}\n\nretrySprint(event) {\n     event.preventDefault();\n         this.setState({\n              getStarted: true,\n              timeStarted: Date.now(),\n              startTime: Date.now(),\n              numberCorrect: null,\n             totalNumQuestions: null,\n             answerList: [],\n              timeRemaining: this.state.lengthOfSprint\n         });\n    console.log(\"RETRY SPRINT\");\n}\n\nnewSprint(event) {\n     event.preventDefault();\n         this.setState({\n              getStarted: false,\n              numberCorrect: null,\n             totalNumQuestions: null,\n             answerList: [],\n              timeRemaining: null,\n              postSprintSummary: false,\n         });\n    console.log(\"NEW SPRINT\");\n}\n\n  setQuestionType(event) {\n    this.setState({\n         typeOfProblem: event.value\n     });\n    console.log(\"setQuestionType\");\n  }\n\n  setQuestionDifficulty(event) {\n    this.setState({\n         difficulty: event.value\n     });\n    console.log(\"setQuestionDifficulty\");\n  }\n\n  setSprintLength(event) {\n       this.setState({\n           lengthOfSprint: event.value\n       });\n      console.log(\"setSprintLength\");\n }\n\n  answerSubmit(answerObj) {\n\n       this.setState({ startTime: Date.now() });\n\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState(prevState => {\n      return { totalNumQuestions: prevState.totalNumQuestions + 1 };\n    });\n\n    if (answerObj.isCorrect === true) {\n      this.setState(prevState => {\n        return { numberCorrect: prevState.numberCorrect + 1 };\n      });\n    }\n  }\n\n\n\n\n  render() {\n\n       const currentColorScheme = this.props.currentColorScheme;\n\n    if (this.state.getStarted === true) {\n\n      return (\n        <div className=\"clb-sprint-active\">\n        <Timer timeStarted={this.state.timeStarted} endSprint={this.endSprint} lengthOfSprint={this.state.lengthOfSprint} />\n          <h2 className=\"quiz-active-message sprint\">SPRINT: Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n            {this.state.difficulty} &middot; {this.state.typeOfProblem}\n          </div>\n          <QuizBody\n               isSprint={true}\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            startTime={this.state.startTime}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n        </div>\n      );\n} else if (this.state.postSprintSummary === true) {\n     return (\n       <>\n         <h3 className=\"sprint-complete-message\">You Completed Your Sprint <FontAwesomeIcon icon={faCheckSquare} /></h3>\n         <Score\n           numberCorrect={this.state.numberCorrect}\n           totalNumQuestions={this.state.totalNumQuestions}\n         />\n         <SprintSummary\n               answerList={this.state.answerList}\n         />\n         <SprintEnding\n               startOver={this.props.startOver}\n               retrySprint={this.retrySprint}\n               newSprint={this.newSprint}\n               startQuiz={this.props.startQuiz}\n          />\n       </>\n     );\n    } else {\n      return (\n        <>\n          <div className=\"settings-container-sprints\">\n             <SprintSettings\n               viewSettings={this.state.viewSettings}\n               toggleViewSettings={this.offCanvasClick}\n               setQuestionType={this.setQuestionType}\n               setQuestionDifficulty={this.setQuestionDifficulty}\n               typeOfProblem={this.state.typeOfProblem}\n               difficulty={this.state.difficulty}\n               setSprintLength={this.setSprintLength}\n               resetColors={this.props.resetColors}\n               currentColorScheme={currentColorScheme}\n               changeColors={this.props.changeColors}\n               startOver={this.props.startOver}\n               />\n             </div>\n          <button onClick={this.getStarted} id=\"clb-lets-go\">\n            Start Now <FontAwesomeIcon icon={faFlagCheckered} />\n          </button>\n        </>\n      );\n    }\n  }\n}\n\nexport default SprintArea;\n","import React from \"react\";\nimport QuizBody from \"./QuizBody.js\";\nimport QuizAlert from \"./QuizAlert.js\";\nimport Score from \"./Score.js\";\nimport Settings from \"./Settings.js\";\nimport Summary from \"./Summary.js\";\nimport SprintArea from \"./SprintArea.js\";\nimport \"./App.css\";\n\nimport { faFlagCheckered, faCog, faTools } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { OffCanvas, OffCanvasMenu } from \"react-offcanvas\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSprint: false,\n      isActive: false,\n      isMenuOpened: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"easy\",\n      startTime: null,\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      streak: 0,\n      answerList: []\n    };\n\n    this.startQuiz = this.startQuiz.bind(this);\n    this.startOver = this.startOver.bind(this);\n    this.setQuestionType = this.setQuestionType.bind(this);\n    this.setQuestionDifficulty = this.setQuestionDifficulty.bind(this);\n    this.answerSubmit = this.answerSubmit.bind(this);\n    this.showSummarytoUser = this.showSummarytoUser.bind(this);\n    this.hideSummaryfromUser = this.hideSummaryfromUser.bind(this);\n    this.offCanvasClick = this.offCanvasClick.bind(this);\n    this.startSprint = this.startSprint.bind(this);\n\n  }\n\n\n\n  startSprint(event) {\n       event.preventDefault();\n      this.setState({\n           isSprint: true,\n           startTime: Date.now(),\n      });\n      this.props.removeNameEntry();\n      //console.log(\"startSprint\");\n }\n\n  startQuiz(event) {\n    event.preventDefault();\n    this.setState({\n         isSprint: false,\n         isActive: true,\n         startTime: Date.now(),\n    });\n    this.props.removeNameEntry();\n  }\n\n\n\n  startOver(event) {\n    event.preventDefault();\n    this.props.resetColors(event);\n    this.props.resetName(event);\n\n    this.setState({\n      isSprint: false,\n      isActive: false,\n      isMenuOpened: false,\n      typeOfProblem: \"addition\",\n      isTimed: false,\n      difficulty: \"easy\",\n      startTime: null,\n      backgroundColors: \"blue\",\n      showSummary: false,\n      numberCorrect: null,\n      totalNumQuestions: null,\n      streak: 0,\n      answerList: []\n    });\n\n    console.log(\"startOver\");\n  }\n\n  setQuestionType(event) {\n    this.setState({ typeOfProblem: event.value,\n         startTime: Date.now()\n     });\n    console.log(\"setQuestionType\");\n  }\n\n  setQuestionDifficulty(event) {\n    this.setState({\n         difficulty: event.value,\n         startTime: Date.now()\n     });\n    console.log(\"setQuestionDifficulty\");\n  }\n\n  showSummarytoUser(event) {\n    event.preventDefault();\n    this.setState({\n         showSummary: true,\n         startTime: Date.now()\n     });\n    console.log(\"showSummarytoUser\");\n  }\n\n  hideSummaryfromUser(event) {\n    event.preventDefault();\n    this.setState({\n         showSummary: false,\n         startTime: Date.now()\n     });\n    console.log(\"hideSummaryfromUser\");\n  }\n\n  answerSubmit(answerObj) {\n\n       this.setState({ startTime: Date.now() });\n\n    // alert(\"Quiz answerSubmit: \" + JSON.stringify(answerObj));\n    this.setState({ answerList: [...this.state.answerList, answerObj] }); //simple value\n    this.setState(prevState => {\n      return { totalNumQuestions: prevState.totalNumQuestions + 1 };\n    });\n\n    if (answerObj.isCorrect === true) {\n      this.setState(prevState => {\n        return {\n             numberCorrect: prevState.numberCorrect + 1,\n             streak: prevState.streak + 1,\n             };\n           });\n     } else {\n\n          this.setState(prevState => {\n            return {\n                 streak: 0,\n            };\n          });\n\n     }\n       }\n\n\n  offCanvasClick() {\n    // toggles the menu opened state\n    this.setState({ isMenuOpened: !this.state.isMenuOpened });\n  }\n\n\n\n  render() {\n\n       const currentColorScheme = this.props.currentColorScheme;\n\n    if (this.state.isActive === true) {\n      return (\n        <>\n             <QuizAlert\n                  streak={this.state.streak}\n                  answerList={this.state.answerList}\n                  numberCorrect={this.state.numberCorrect}\n                  totalNumQuestions={this.state.totalNumQuestions}\n             />\n          <h2 className=\"quiz-active-message\">Complete the Question Below</h2>\n          <div className=\"type-of-question\">\n            {this.state.difficulty} &middot; {this.state.typeOfProblem}\n          </div>\n\n          <div className=\"clb-settings hidden\">\n             <button onClick={this.offCanvasClick}>\n               <FontAwesomeIcon icon={faCog} /> Show Settings\n             </button>\n          </div>\n\n          <OffCanvas\n             width={400}\n             transitionDuration={800}\n             effect={\"overlay\"}\n             isMenuOpened={this.state.isMenuOpened}\n             position={\"right\"}\n           >\n             <OffCanvasMenu className=\"off-canvas-menu\">\n               <div className=\"settings-container\">\n                  <Settings\n                    viewSettings={this.state.viewSettings}\n                    toggleViewSettings={this.offCanvasClick}\n                    setQuestionType={this.setQuestionType}\n                    setQuestionDifficulty={this.setQuestionDifficulty}\n                    typeOfProblem={this.state.typeOfProblem}\n                    difficulty={this.state.difficulty}\n                    showSummary={this.state.showSummary}\n                    showSummarytoUser={this.showSummarytoUser}\n                    hideSummaryfromUser={this.hideSummaryfromUser}\n                    startOver={this.startOver}\n                    resetColors={this.props.resetColors}\n                    currentColorScheme={currentColorScheme}\n                    changeColors={this.props.changeColors}\n                  />\n                  </div>\n             </OffCanvasMenu>\n      </OffCanvas>\n\n          <QuizBody\n            typeOfProblem={this.state.typeOfProblem}\n            difficulty={this.state.difficulty}\n            streak={this.state.streak}\n            startTime={this.state.startTime}\n            answerSubmit={this.answerSubmit}\n            answerList={this.state.answerList}\n          />\n          <Score\n            numberCorrect={this.state.numberCorrect}\n            totalNumQuestions={this.state.totalNumQuestions}\n          />\n          <Summary\n           answerList={this.state.answerList}\n           showSummary={this.state.showSummary}\n          />\n        </>\n      );\n} else if (this.state.isSprint === true) {\n\n     return (\n       <>\n          <div className=\"clb-sprint-area\">\n          <SprintArea\n               resetColors={this.props.resetColors}\n               currentColorScheme={currentColorScheme}\n               changeColors={this.props.changeColors}\n               startOver={this.startOver}\n               numberCorrect={this.state.numberCorrect}\n               totalNumQuestions={this.state.totalNumQuestions}\n               startTime={this.state.startTime}\n               startQuiz={this.startQuiz}\n          />\n         </div>\n       </>\n     );\n\n} else {\n      return (\n        <>\n          <button onClick={this.startQuiz} id=\"start-quiz\">\n            Practice Laps (Open Practice) <FontAwesomeIcon icon={faTools} />\n          </button>\n          <button onClick={this.startSprint} id=\"start-sprints\">\n            Race (Math Sprints) <FontAwesomeIcon icon={faFlagCheckered} />\n          </button>\n        </>\n      );\n    }\n  }\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction NameForm(props) {\n\n     const name = props.name;\n     const handleNameSubmit = props.handleNameSubmit;\n     const handleNameChange = props.handleNameChange;\n\n     if( props.nameFormActive === true ) {\n\n       return (\n            <>\n              <form id=\"name-form\" onSubmit={handleNameSubmit} >\n                <label>\n                What's your name?\n                  <input type=\"text\" onChange={handleNameChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n              </form>\n         </>\n       );\n\n } else if( (props.nameFormActive === false) && (name !== null) ) {\n\n           return (\n                 <>\n                 <div className=\"clb-welcome-area\">\n                 <p>Welcome, {props.name}</p>\n                 </div>\n                   </>\n           );\n\n     } else {\n\n          return <></>;\n\n     }\n\n}\n\nexport default NameForm;\n","import React from \"react\";\nimport \"./App.css\";\n\n// get our fontawesome imports\n// import {\n//   faHeart,\n//   faCoffee,\n// } from \"@fortawesome/free-solid-svg-icons\";\n//import { faAbacus } from \"@fortawesome/pro-solid-svg-icons\";\n//import { faAbacus } from \"@fortawesome/pro-light-svg-icons\";\nimport { faAbacus } from \"@fortawesome/pro-duotone-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction RacecarFooter() {\n  return (\n    <footer className=\"clb-footer\">\n     <p className=\"inspired\">\n        Inspired by all the Lemurs in Ms. Jaworski's 2nd-grade class! <FontAwesomeIcon icon={faAbacus} />\n      </p>\n      <p className=\"version\"><a href=\"https://github.com/tomatillodesign/racecar-math\" target=\"_blank\" rel=\"noopener noreferrer\">Version 1.0</a></p>\n    </footer>\n  );\n}\n\nexport default RacecarFooter;\n","import React from \"react\";\nimport RacecarHeader from \"./RacecarHeader\";\nimport Quiz from \"./Quiz\";\nimport NameForm from \"./NameForm.js\";\nimport RacecarFooter from \"./RacecarFooter\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorScheme: { value: 'blue', label: 'Blue' },\n      name: null,\n      nameFormActive: true,\n    };\n\n    this.changeColors = this.changeColors.bind(this);\n    this.resetColors = this.resetColors.bind(this);\n    this.resetName = this.resetName.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleNameSubmit = this.handleNameSubmit.bind(this);\n    this.removeNameEntry = this.removeNameEntry.bind(this)\n\n  }\n\n  resetName(event) {\n       this.setState({\n            name: null,\n            nameFormActive: true\n       });\n       console.log(\"RESET NAME\");\n }\n\n  changeColors(event) {\n      console.log(event);\n      this.setState({ colorScheme: event });\n  }\n\n  resetColors(event) {\n       this.setState({\n            colorScheme: { value: 'blue', label: 'Blue' }\n       });\n       console.log('RESET COLORS');\n }\n\n\n handleNameChange(event) {\n     event.preventDefault();\n     // console.log(event.target.value);\n     this.setState({\n          name: event.target.value\n     });\n }\n\n\n handleNameSubmit(event) {\n   event.preventDefault();\n   this.setState({\n        nameFormActive: false\n   });\n }\n\n\n removeNameEntry() {\n      this.setState({\n           nameFormActive: false\n      });\n}\n\n  render() {\n    let appClasses = \"App racecar-math \" + this.state.colorScheme.value;\n\n    //console.log('Current Name: ' + this.state.name);\n\n    return (\n      <div className={appClasses}>\n        <RacecarHeader />\n        <NameForm\n            name={this.state.name}\n            nameFormActive={this.state.nameFormActive}\n            handleNameChange={this.handleNameChange}\n            handleNameSubmit={this.handleNameSubmit}\n        />\n        <Quiz\n               changeColors={this.changeColors}\n               currentColorScheme={this.state.colorScheme.value}\n               resetColors={this.resetColors}\n               resetName={this.resetName}\n               removeNameEntry={this.removeNameEntry}\n          />\n        <RacecarFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// get our fontawesome imports\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}